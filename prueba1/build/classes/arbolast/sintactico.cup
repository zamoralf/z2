package arbolast;
import java_cup.runtime.Symbol;
import java.util.Stack;

parser code
{:
    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en símbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en símbolo: "+s.value+", "+s.left+", "+s.right);
    }
:}

action code
{:
Stack<Nodo> pilaNodos = new Stack<Nodo>();
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, SI, ENTONCES, FIN, FINPARA, 
    FINCASO, FINSI, FINMIENTRAS, MIENTRAS, CONCATENAR, IMPRIMIR, O, Y, NO, IGUAL_IGUAL, 
    MENOR, MAYOR, IGUAL, MAS, MENOS, DIVISION, ASTERISCO, PUNTO_COMA, PARA, HACER, 
    SELECCIONAR, CASO, CONTRARIO, DOS_PUNTOS, LLAVE_ABIERTA, LLAVE_CERRADA, HASTA, CONCAT;

terminal String ENTERO, CADENA, ID;

non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, si, mientras, imprimir,
    expresion, expresiones, para, hacerMientras, seleccionar, casos, caso;

precedence left O;
precedence left Y;
precedence left NO;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left CONCAT;
precedence left MAS, MENOS;
precedence left ASTERISCO, DIVISION;
precedence right IGUAL;
precedence left HASTA;

start with inicio;

inicio ::= instrucciones:insts
{:
parser.instrucciones = insts;
:};

instrucciones ::= instrucciones:insts instruccion:inst
{:
pilaNodos.push(insts);
insts.hijos.add(inst);
RESULT = insts;
:}
    | instruccion:inst
{:
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst
{:
RESULT = inst;
:}
    | si:inst
{:
RESULT = inst;
:}
    | mientras:inst
{:
RESULT = inst;
:}
    | para:inst
{:
RESULT = inst;
:}
    | hacerMientras:inst
{:
RESULT = inst;
:}
    | seleccionar:inst
{:
RESULT = inst;
:}
    | imprimir:inst
{:
RESULT = inst;
:}
    | error{:
Nodo n = new Nodo("Error");
RESULT = n;
:}
    ;

asignacion ::= ID:id IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    ;

si ::= SI expresion:expr instrucciones:insts FINSI
{:
Nodo nodo = new Nodo("si");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | SI expresion:expr instrucciones:insts ENTONCES instrucciones:insts2 FINSI
{:
Nodo nodo = new Nodo("si");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;
:}
    ;

mientras ::= MIENTRAS expresion:expr instrucciones:insts FINMIENTRAS
{:
Nodo nodo = new Nodo("mientras");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ;

imprimir ::= IMPRIMIR expresion:expr
{:
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOS expresion:expr2
{:
Nodo nodo = new Nodo("-");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr DIVISION expresion:expr2
{:
Nodo nodo = new Nodo("/");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
   | expresion:expr CONCAT expresion:expr2
{:
Nodo nodo = new Nodo("&");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr HASTA expresion:expr2
{:
Nodo nodo = new Nodo("hasta");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | NO expresion:expr
{:
Nodo nodo = new Nodo("no");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr O expresion:expr2
{:
Nodo nodo = new Nodo("o");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr Y expresion:expr2
{:
Nodo nodo = new Nodo("y");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
RESULT = expr;
:}
    | ID:id
{:
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ENTERO:entero
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;
:}
    | CADENA:cadena
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;
:}
    ;

casos ::= casos:cs caso:c 
          {: Nodo nodo = cs; 
             nodo.hijos.add(c); 
             RESULT = nodo; :} 
        | caso:c 
          {: Nodo nodo = new Nodo("casos"); 
             nodo.hijos.add(c); 
             RESULT = nodo; :};

caso ::= CASO expresion:expr DOS_PUNTOS instrucciones:insts FINCASO
         {: Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :} 
       | CONTRARIO DOS_PUNTOS instrucciones:insts FINCASO
         {: Nodo nodo = new Nodo("contrario"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :};

seleccionar ::= SELECCIONAR PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTA casos:cs LLAVE_CERRADA 
           {: Nodo nodo = new Nodo("seleccionar"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; :};

para ::= PARA PARENTESIS_ABIERTO ID:id IGUAL expresion:inicial PUNTO_COMA expresion:cond PUNTO_COMA expresion:incremento PARENTESIS_CERRADO instrucciones:insts FINPARA
{:
    Nodo nodo = new Nodo("para");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(cond);
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;
:};