/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package arbolast;

import java.io.Reader;
import java.io.StringReader;
import java.util.Objects;
import java_cup.runtime.ComplexSymbolFactory;

/**
 *
 * @author zamoral
 */
public class Interfaz extends javax.swing.JFrame {

    private ListaVariables variables;
    private Nodo instrucciones;
    private String salida;
    private Variable variables2;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("/*calculo de 0 + 1 + 2 + ... + n - 2 + n - 1 + n,\npara un entero n*/\nn = 5\nb = 1\ni = 0\nwhile b < n + 1\n    i = i + b\n    b = b + 1\nend\nputs concat(\"sum( n = \", n, \" ) = \", i)");
        jTextArea1.setToolTipText("");
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Codigo de entrada:");

        jLabel2.setText("Codigo de salida:");

        jButton1.setText("Compilar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            Reader reader = new StringReader(jTextArea1.getText());
            AnalisisLexico scanner = new AnalisisLexico(reader);
            ComplexSymbolFactory sf = new ComplexSymbolFactory();
            scanner.setSymbolFactory(sf);
            AnalisisSintactico parser = new AnalisisSintactico(scanner, sf);
            parser.parse();
            variables = new ListaVariables();
            salida = "";
            instrucciones = parser.instrucciones;
            ejecutar(instrucciones);
            jTextArea2.setText(salida);
        } catch (Exception exception) {
            System.out.println(exception.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ejecutar(Nodo instrucciones) throws Exception {
        int i = 0;
        Nodo instruccion;
        while (i < instrucciones.hijos.size()) {
            instruccion = instrucciones.hijos.get(i);
            switch (instruccion.valor) {
                case "asignacion":
                    String id = instruccion.hijos.get(0).hijos.get(0).valor;
                    Object val = evaluarExpresion(instruccion.hijos.get(1));
                    Variable var = new Variable();
                    var.nombre = id;
                    var.valor = val;
                    variables.agregar(var);
                    break;
                case "para":
                    ejecutarPara(instruccion);
                    break;
                case "si":
                    ejecutarSi(instruccion);
                    break;
                case "hacer-mientras":
                    ejecutarDoWhile(instruccion);
                    break;
                case "seleccionar":
                    ejecutarSeleccionar(instruccion);
                    break;
                case "mientras":
                    ejecutarMientras(instruccion);
                    break;
                case "imprimir":
                    salida += evaluarExpresion(instruccion.hijos.get(0)) + "\n";
                    break;
                default:
                    throw new Exception("No se reconoce la instrucción: " + instruccion.valor);
            }
            i++;
        }
    }

    private void ejecutarPara(Nodo instruccion) throws Exception {
        String id = instruccion.hijos.get(0).hijos.get(0).valor;
        Object valInicial = evaluarExpresion(instruccion.hijos.get(1));
        Variable var = new Variable();
        var.nombre = id;
        var.valor = valInicial;
        variables.agregar(var);

        while ((Boolean) evaluarExpresion(instruccion.hijos.get(2))) {
            ejecutar(instruccion.hijos.get(4));

            Object incremento = evaluarExpresion(instruccion.hijos.get(3));
            var.valor = incremento;
            variables.agregar(var);
        }
    }

    private void ejecutarSi(Nodo instruccion) throws Exception {
        if ((Boolean) evaluarExpresion(instruccion.hijos.get(0))) {
            ejecutar(instruccion.hijos.get(1));
        } else if (instruccion.hijos.size() == 3) {
            ejecutar(instruccion.hijos.get(2));
        }
    }

    private void ejecutarDoWhile(Nodo instruccion) throws Exception {
        Nodo cuerpo = instruccion.hijos.get(0);
        Nodo condicion = instruccion.hijos.get(1);
        ejecutar(cuerpo);

        while ((Boolean) evaluarExpresion(condicion)) {
            ejecutar(cuerpo);
        }
    }

    private void ejecutarSeleccionar(Nodo instruccion) throws Exception {
        Object switchValue = evaluarExpresion(instruccion.hijos.get(0));
        Nodo casos = instruccion.hijos.get(1);
        boolean coincidenciaEncontrada = false;
        Nodo casoDefault = null;

        for (Nodo caso : casos.hijos) {
            if (caso.valor.equals("caso")) {
                Object casoValue = evaluarExpresion(caso.hijos.get(0));

                if (!coincidenciaEncontrada && switchValue.equals(casoValue)) {
                    ejecutar(caso.hijos.get(1));
                    coincidenciaEncontrada = true;
                }
            } else if (caso.valor.equals("contrario")) {
                casoDefault = caso;
            }
        }

        if (!coincidenciaEncontrada && casoDefault != null) {
            ejecutar(casoDefault.hijos.get(0));
        }
    }

    private void ejecutarMientras(Nodo instruccion) throws Exception {
        while ((Boolean) evaluarExpresion(instruccion.hijos.get(0))) {
            ejecutar(instruccion.hijos.get(1));
        }
    }

    private Object evaluarExpresion(Nodo nodo) throws Exception {
        Nodo aux = nodo.hijos.get(0);
        switch (nodo.valor) {
            case "valor":
                if (aux.valor.equals("entero")) {
                    try {
                        return Integer.valueOf(aux.hijos.get(0).valor);
                    } catch (NumberFormatException e) {
                        throw new Exception("El valor no es un número válido: " + aux.hijos.get(0).valor);
                    }
                } else if (aux.valor.equals("cadena")) {
                    return aux.hijos.get(0).valor; // Retorna la cadena directamente
                }
                throw new Exception("Tipo de valor no reconocido: " + aux.valor);

            case "variable":
                Variable var = variables.buscar(aux.valor);
                if (var == null) {
                    throw new Exception("Variable no declarada: " + aux.valor);
                }
                return var.valor;

            case "&": // Concatenación
                StringBuilder resultado = new StringBuilder();
                for (Nodo hijo : nodo.hijos) {
                    Object valor = evaluarExpresion(hijo);
                    if (valor == null) {
                        throw new Exception("No se puede concatenar un valor nulo");
                    }
                    resultado.append(valor.toString());
                }
                return resultado.toString();

            case "and":
                Object op1 = evaluarExpresion(nodo.hijos.get(0));
                Object op2 = evaluarExpresion(nodo.hijos.get(1));
                if (op1 instanceof Boolean && op2 instanceof Boolean) {
                    return (Boolean) op1 && (Boolean) op2;
                }
                throw new Exception("Operadores no booleanos para 'and': " + op1 + " y " + op2);

            case "or":
                op1 = evaluarExpresion(nodo.hijos.get(0));
                op2 = evaluarExpresion(nodo.hijos.get(1));
                if (op1 instanceof Boolean && op2 instanceof Boolean) {
                    return (Boolean) op1 || (Boolean) op2;
                }
                throw new Exception("Operadores no booleanos para 'or': " + op1 + " y " + op2);

            case "not":
                op1 = evaluarExpresion(nodo.hijos.get(0));
                if (op1 instanceof Boolean) {
                    return !(Boolean) op1;
                }
                throw new Exception("Operador no booleano para 'not': " + op1);

            case "==":
                Object primera = evaluarExpresion(nodo.hijos.get(0));
                Object segunda = evaluarExpresion(nodo.hijos.get(1));
                return Objects.equals(primera, segunda);

            case "<":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    return (Integer) primera < (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '<': " + primera + " y " + segunda);

            case ">":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    return (Integer) primera > (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '>': " + primera + " y " + segunda);

            case "*":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    return (Integer) primera * (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '*': " + primera + " y " + segunda);

            case "+":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    return (Integer) primera + (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '+': " + primera + " y " + segunda);

            case "-":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    return (Integer) primera - (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '-': " + primera + " y " + segunda);

            case "/":
                primera = evaluarExpresion(nodo.hijos.get(0));
                segunda = evaluarExpresion(nodo.hijos.get(1));
                if (primera instanceof Integer && segunda instanceof Integer) {
                    if ((Integer) segunda == 0) {
                        throw new Exception("División por cero");
                    }
                    return (Integer) primera / (Integer) segunda;
                }
                throw new Exception("Operadores no válidos para '/': " + primera + " y " + segunda);

            default:
                throw new Exception("No se reconoce el nodo: " + nodo.valor);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
