
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package arbolast;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\005\000\002\006\006\000\002\006\010\000\002\007" +
    "\006\000\002\010\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\007\000\002\017\006\000\002\015\011\000\002" +
    "\013\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\020\003\017\007\023\016\020\020\021\035" +
    "\022\037\016\051\014\001\002\000\034\002\ufff9\003\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\035\ufff9\037\ufff9\051\ufff9\001\002\000\034" +
    "\002\ufff8\003\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\020\ufff8\035\ufff8\037\ufff8\051\ufff8" +
    "\001\002\000\004\002\134\001\002\000\034\002\ufffc\003" +
    "\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\020\ufffc\035\ufffc\037\ufffc\051\ufffc\001\002\000" +
    "\022\002\000\003\017\007\023\016\020\020\021\035\022" +
    "\037\016\051\014\001\002\000\034\002\ufff7\003\ufff7\007" +
    "\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\020\ufff7\035\ufff7\037\ufff7\051\ufff7\001\002\000\034\002" +
    "\ufffe\003\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\020\ufffe\035\ufffe\037\ufffe\051\ufffe\001" +
    "\002\000\034\002\ufffd\003\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\035\ufffd\037" +
    "\ufffd\051\ufffd\001\002\000\004\027\132\001\002\000\034" +
    "\002\ufffb\003\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\020\ufffb\035\ufffb\037\ufffb\051\ufffb" +
    "\001\002\000\004\004\111\001\002\000\034\002\ufff6\003" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\035\ufff6\037\ufff6\051\ufff6\001\002\000" +
    "\014\004\026\023\031\047\030\050\027\051\025\001\002" +
    "\000\014\004\026\023\031\047\030\050\027\051\025\001" +
    "\002\000\004\004\072\001\002\000\014\004\026\023\031" +
    "\047\030\050\027\051\025\001\002\000\034\002\ufffa\003" +
    "\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\035\ufffa\037\ufffa\051\ufffa\001\002\000" +
    "\070\002\uffe3\003\uffe3\005\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\037\uffe3\042\uffe3\045\uffe3\046" +
    "\uffe3\051\uffe3\001\002\000\014\004\026\023\031\047\030" +
    "\050\027\051\025\001\002\000\070\002\uffe1\003\uffe1\005" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\037\uffe1\042\uffe1\045\uffe1\046\uffe1\051\uffe1\001\002\000" +
    "\070\002\uffe2\003\uffe2\005\uffe2\007\uffe2\010\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\037\uffe2\042\uffe2\045\uffe2\046" +
    "\uffe2\051\uffe2\001\002\000\014\004\026\023\031\047\030" +
    "\050\027\051\025\001\002\000\046\003\017\007\023\016" +
    "\020\020\021\021\041\022\036\024\043\025\035\026\044" +
    "\030\046\031\034\032\037\033\045\035\022\037\016\045" +
    "\040\046\042\051\014\001\002\000\024\003\017\007\023" +
    "\010\062\014\064\016\020\020\021\035\022\037\016\051" +
    "\014\001\002\000\014\004\026\023\031\047\030\050\027" +
    "\051\025\001\002\000\014\004\026\023\031\047\030\050" +
    "\027\051\025\001\002\000\014\004\026\023\031\047\030" +
    "\050\027\051\025\001\002\000\014\004\026\023\031\047" +
    "\030\050\027\051\025\001\002\000\014\004\026\023\031" +
    "\047\030\050\027\051\025\001\002\000\014\004\026\023" +
    "\031\047\030\050\027\051\025\001\002\000\014\004\026" +
    "\023\031\047\030\050\027\051\025\001\002\000\014\004" +
    "\026\023\031\047\030\050\027\051\025\001\002\000\014" +
    "\004\026\023\031\047\030\050\027\051\025\001\002\000" +
    "\014\004\026\023\031\047\030\050\027\051\025\001\002" +
    "\000\014\004\026\023\031\047\030\050\027\051\025\001" +
    "\002\000\070\002\ufff0\003\ufff0\005\ufff0\007\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0" +
    "\032\037\033\045\034\ufff0\035\ufff0\037\ufff0\042\ufff0\045" +
    "\040\046\ufff0\051\ufff0\001\002\000\070\002\uffed\003\uffed" +
    "\005\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed" +
    "\026\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\037\uffed\042\uffed\045\040\046\uffed\051\uffed\001\002" +
    "\000\070\002\uffec\003\uffec\005\uffec\007\uffec\010\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec" +
    "\022\uffec\024\uffec\025\uffec\026\uffec\030\046\031\034\032" +
    "\037\033\045\034\uffec\035\uffec\037\uffec\042\uffec\045\040" +
    "\046\042\051\uffec\001\002\000\070\002\uffe8\003\uffe8\005" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\035\026" +
    "\044\030\046\031\034\032\037\033\045\034\uffe8\035\uffe8" +
    "\037\uffe8\042\uffe8\045\040\046\042\051\uffe8\001\002\000" +
    "\070\002\uffea\003\uffea\005\uffea\007\uffea\010\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\024\uffea\025\uffea\026\uffea\030\046\031\034\032\037" +
    "\033\045\034\uffea\035\uffea\037\uffea\042\uffea\045\040\046" +
    "\uffea\051\uffea\001\002\000\070\002\uffe6\003\uffe6\005\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\020\uffe6\021\uffe6\022\036\024\043\025\035\026\044" +
    "\030\046\031\034\032\037\033\045\034\uffe6\035\uffe6\037" +
    "\uffe6\042\uffe6\045\040\046\042\051\uffe6\001\002\000\070" +
    "\002\uffe9\003\uffe9\005\uffe9\007\uffe9\010\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\037\uffe9\042\uffe9\045\uffe9\046\uffe9" +
    "\051\uffe9\001\002\000\070\002\uffee\003\uffee\005\uffee\007" +
    "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee" +
    "\042\uffee\045\040\046\uffee\051\uffee\001\002\000\070\002" +
    "\uffe5\003\uffe5\005\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\024" +
    "\043\025\035\026\044\030\046\031\034\032\037\033\045" +
    "\034\uffe5\035\uffe5\037\uffe5\042\uffe5\045\040\046\042\051" +
    "\uffe5\001\002\000\070\002\uffeb\003\uffeb\005\uffeb\007\uffeb" +
    "\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\030\046" +
    "\031\034\032\037\033\045\034\uffeb\035\uffeb\037\uffeb\042" +
    "\uffeb\045\040\046\042\051\uffeb\001\002\000\070\002\uffef" +
    "\003\uffef\005\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\032\037\033\045\034" +
    "\uffef\035\uffef\037\uffef\042\uffef\045\040\046\uffef\051\uffef" +
    "\001\002\000\020\003\017\007\023\016\020\020\021\035" +
    "\022\037\016\051\014\001\002\000\034\002\uffff\003\uffff" +
    "\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016" +
    "\uffff\020\uffff\035\uffff\037\uffff\051\uffff\001\002\000\034" +
    "\002\ufff4\003\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\035\ufff4\037\ufff4\051\ufff4" +
    "\001\002\000\022\003\017\007\023\014\066\016\020\020" +
    "\021\035\022\037\016\051\014\001\002\000\034\002\ufff3" +
    "\003\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\020\ufff3\035\ufff3\037\ufff3\051\ufff3\001\002" +
    "\000\070\002\uffe7\003\uffe7\005\uffe7\007\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\024\043\025\035\026\044\030\046\031\034\032" +
    "\037\033\045\034\uffe7\035\uffe7\037\uffe7\042\uffe7\045\040" +
    "\046\042\051\uffe7\001\002\000\032\005\071\021\041\022" +
    "\036\024\043\025\035\026\044\030\046\031\034\032\037" +
    "\033\045\045\040\046\042\001\002\000\070\002\uffe4\003" +
    "\uffe4\005\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\037\uffe4\042\uffe4\045\uffe4\046\uffe4\051\uffe4\001" +
    "\002\000\004\051\073\001\002\000\004\027\074\001\002" +
    "\000\014\004\026\023\031\047\030\050\027\051\025\001" +
    "\002\000\032\021\041\022\036\024\043\025\035\026\044" +
    "\030\046\031\034\032\037\033\045\034\076\045\040\046" +
    "\042\001\002\000\014\004\026\023\031\047\030\050\027" +
    "\051\025\001\002\000\032\021\041\022\036\024\043\025" +
    "\035\026\044\030\046\031\034\032\037\033\045\034\100" +
    "\045\040\046\042\001\002\000\014\004\026\023\031\047" +
    "\030\050\027\051\025\001\002\000\032\005\102\021\041" +
    "\022\036\024\043\025\035\026\044\030\046\031\034\032" +
    "\037\033\045\045\040\046\042\001\002\000\020\003\017" +
    "\007\023\016\020\020\021\035\022\037\016\051\014\001" +
    "\002\000\022\003\017\007\023\012\104\016\020\020\021" +
    "\035\022\037\016\051\014\001\002\000\034\002\uffdb\003" +
    "\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\035\uffdb\037\uffdb\051\uffdb\001\002\000" +
    "\062\002\ufff1\003\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\041\022\036\024" +
    "\043\025\035\026\044\030\046\031\034\032\037\033\045" +
    "\035\ufff1\037\ufff1\045\040\046\042\051\ufff1\001\002\000" +
    "\046\003\017\007\023\016\020\020\021\021\041\022\036" +
    "\024\043\025\035\026\044\030\046\031\034\032\037\033" +
    "\045\035\022\037\016\045\040\046\042\051\014\001\002" +
    "\000\022\003\017\007\023\015\110\016\020\020\021\035" +
    "\022\037\016\051\014\001\002\000\034\002\ufff2\003\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\020\ufff2\035\ufff2\037\ufff2\051\ufff2\001\002\000\014" +
    "\004\026\023\031\047\030\050\027\051\025\001\002\000" +
    "\032\005\113\021\041\022\036\024\043\025\035\026\044" +
    "\030\046\031\034\032\037\033\045\045\040\046\042\001" +
    "\002\000\004\043\114\001\002\000\006\040\120\041\117" +
    "\001\002\000\010\040\120\041\117\044\131\001\002\000" +
    "\010\040\uffdf\041\uffdf\044\uffdf\001\002\000\004\042\125" +
    "\001\002\000\014\004\026\023\031\047\030\050\027\051" +
    "\025\001\002\000\032\021\041\022\036\024\043\025\035" +
    "\026\044\030\046\031\034\032\037\033\045\042\122\045" +
    "\040\046\042\001\002\000\020\003\017\007\023\016\020" +
    "\020\021\035\022\037\016\051\014\001\002\000\022\003" +
    "\017\007\023\013\124\016\020\020\021\035\022\037\016" +
    "\051\014\001\002\000\010\040\uffde\041\uffde\044\uffde\001" +
    "\002\000\020\003\017\007\023\016\020\020\021\035\022" +
    "\037\016\051\014\001\002\000\022\003\017\007\023\013" +
    "\127\016\020\020\021\035\022\037\016\051\014\001\002" +
    "\000\010\040\uffdd\041\uffdd\044\uffdd\001\002\000\010\040" +
    "\uffe0\041\uffe0\044\uffe0\001\002\000\034\002\uffdc\003\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\035\uffdc\037\uffdc\051\uffdc\001\002\000\014" +
    "\004\026\023\031\047\030\050\027\051\025\001\002\000" +
    "\062\002\ufff5\003\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\041\022\036\024" +
    "\043\025\035\026\044\030\046\031\034\032\037\033\045" +
    "\035\ufff5\037\ufff5\045\040\046\042\051\ufff5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\026\002\005\003\007\004\011\005\012\006" +
    "\006\007\014\010\010\013\023\014\003\015\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\062\005\012\006\006\007\014" +
    "\010\010\013\023\014\003\015\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\105\001\001\000\004\011\104\001\001\000\002" +
    "\001\001\000\004\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\066\001\001\000\024\003" +
    "\032\004\011\005\012\006\006\007\014\010\010\013\023" +
    "\014\003\015\004\001\001\000\022\004\062\005\012\006" +
    "\006\007\014\010\010\013\023\014\003\015\004\001\001" +
    "\000\004\011\060\001\001\000\004\011\057\001\001\000" +
    "\004\011\056\001\001\000\004\011\055\001\001\000\004" +
    "\011\054\001\001\000\004\011\053\001\001\000\004\011" +
    "\052\001\001\000\004\011\051\001\001\000\004\011\050" +
    "\001\001\000\004\011\047\001\001\000\004\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\064\004\011\005" +
    "\012\006\006\007\014\010\010\013\023\014\003\015\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\062\005\012\006\006\007\014\010\010\013\023\014\003" +
    "\015\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\074\001\001\000\002\001\001\000" +
    "\004\011\076\001\001\000\002\001\001\000\004\011\100" +
    "\001\001\000\002\001\001\000\024\003\102\004\011\005" +
    "\012\006\006\007\014\010\010\013\023\014\003\015\004" +
    "\001\001\000\022\004\062\005\012\006\006\007\014\010" +
    "\010\013\023\014\003\015\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\106\004\011\005\012\006" +
    "\006\007\014\010\010\013\023\014\003\015\004\001\001" +
    "\000\022\004\062\005\012\006\006\007\014\010\010\013" +
    "\023\014\003\015\004\001\001\000\002\001\001\000\004" +
    "\011\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\114\017\115\001\001\000\004\017\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\120\001" +
    "\001\000\002\001\001\000\024\003\122\004\011\005\012" +
    "\006\006\007\014\010\010\013\023\014\003\015\004\001" +
    "\001\000\022\004\062\005\012\006\006\007\014\010\010" +
    "\013\023\014\003\015\004\001\001\000\002\001\001\000" +
    "\024\003\125\004\011\005\012\006\006\007\014\010\010" +
    "\013\023\014\003\015\004\001\001\000\022\004\062\005" +
    "\012\006\006\007\014\010\010\013\023\014\003\015\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\132\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en símbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en símbolo: "+s.value+", "+s.left+", "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


Stack<Nodo> pilaNodos = new Stack<Nodo>();

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.instrucciones = insts;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
pilaNodos.push(insts);
insts.hijos.add(inst);
RESULT = insts;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= si 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= mientras 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= para 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= hacerMientras 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= seleccionar 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= imprimir 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= error 
            {
              Nodo RESULT =null;
		
Nodo n = new Nodo("Error");
RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // si ::= SI expresion instrucciones FINSI 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("si");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("si",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // si ::= SI expresion instrucciones ENTONCES instrucciones FINSI 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("si");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("si",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mientras ::= MIENTRAS expresion instrucciones FINMIENTRAS 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("mientras");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("mientras",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // imprimir ::= IMPRIMIR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("-");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion DIVISION expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("/");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion CONCAT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("&");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion HASTA expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("hasta");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= NO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("no");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion O expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("o");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion Y expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("y");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // casos ::= casos caso 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 Nodo nodo = cs; 
             nodo.hijos.add(c); 
             RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // casos ::= caso 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("casos"); 
             nodo.hijos.add(c); 
             RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso ::= CASO expresion DOS_PUNTOS instrucciones FINCASO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caso ::= CONTRARIO DOS_PUNTOS instrucciones FINCASO 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("contrario"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seleccionar ::= SELECCIONAR PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos LLAVE_CERRADA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("seleccionar"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("seleccionar",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // para ::= PARA PARENTESIS_ABIERTO ID IGUAL expresion PUNTO_COMA expresion PUNTO_COMA expresion PARENTESIS_CERRADO instrucciones FINPARA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Nodo inicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo incremento = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    Nodo nodo = new Nodo("para");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(cond);
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("para",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
