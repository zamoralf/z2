
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package arbolast;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\020" +
    "\006\000\002\020\010\000\002\021\005\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\005\005\000\002\006\010\000\002\006\012\000\002\006" +
    "\007\000\002\006\011\000\002\007\007\000\002\007\007" +
    "\000\002\026\007\000\002\010\004\000\002\024\006\000" +
    "\002\025\005\000\002\025\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\006\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\003\000\002" +
    "\013\016\000\002\014\012\000\002\015\010\000\002\015" +
    "\012\000\002\015\012\000\002\016\004\000\002\016\003" +
    "\000\002\017\010\000\002\017\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\034\003\026\007\013\012\006\027\017\030" +
    "\012\036\035\042\033\044\014\050\025\052\011\054\031" +
    "\067\034\101\016\001\002\000\036\002\000\003\026\007" +
    "\013\012\006\027\017\030\012\036\035\042\033\044\014" +
    "\050\025\052\011\054\031\067\034\101\016\001\002\000" +
    "\004\025\272\001\002\000\030\004\051\013\045\016\052" +
    "\063\044\064\046\072\042\101\050\102\043\103\041\104" +
    "\053\105\040\001\002\000\004\025\265\001\002\000\060" +
    "\002\ufffe\003\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\027" +
    "\ufffe\030\ufffe\035\ufffe\036\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\067\ufffe\070\ufffe\101\ufffe\001\002\000\030\004\051" +
    "\013\045\016\052\063\044\064\046\072\042\101\050\102" +
    "\043\103\041\104\053\105\040\001\002\000\004\004\250" +
    "\001\002\000\030\004\051\013\045\016\052\063\044\064" +
    "\046\072\042\101\050\102\043\103\041\104\053\105\040" +
    "\001\002\000\004\101\225\001\002\000\004\025\224\001" +
    "\002\000\004\022\222\001\002\000\004\034\213\001\002" +
    "\000\004\002\212\001\002\000\060\002\ufff7\003\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\027\ufff7\030\ufff7\035\ufff7" +
    "\036\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\067\ufff7\070\ufff7" +
    "\101\ufff7\001\002\000\060\002\ufff8\003\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\027\ufff8\030\ufff8\035\ufff8\036\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\054\ufff8\067\ufff8\070\ufff8\101\ufff8" +
    "\001\002\000\060\002\ufffb\003\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\027\ufffb\030\ufffb\035\ufffb\036\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\046\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\067\ufffb\070\ufffb\101\ufffb\001\002" +
    "\000\060\002\ufffa\003\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\027\ufffa\030\ufffa\035\ufffa\036\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\046\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\067\ufffa\070\ufffa\101\ufffa\001\002\000\030" +
    "\004\051\013\045\016\052\063\044\064\046\072\042\101" +
    "\050\102\043\103\041\104\053\105\040\001\002\000\004" +
    "\025\200\001\002\000\060\002\ufff9\003\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\027\ufff9\030\ufff9\035\ufff9\036\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\067\ufff9\070\ufff9\101\ufff9" +
    "\001\002\000\004\025\177\001\002\000\004\101\161\001" +
    "\002\000\060\002\ufff6\003\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\027\ufff6\030\ufff6\035\ufff6\036\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\067\ufff6\070\ufff6\101\ufff6\001\002\000" +
    "\030\004\051\013\045\016\052\063\044\064\046\072\042" +
    "\101\050\102\043\103\041\104\053\105\040\001\002\000" +
    "\034\003\026\007\013\012\006\027\017\030\012\036\035" +
    "\042\033\044\014\050\025\052\011\054\031\067\034\101" +
    "\016\001\002\000\006\004\036\037\037\001\002\000\030" +
    "\004\051\013\045\016\052\063\044\064\046\072\042\101" +
    "\050\102\043\103\041\104\053\105\040\001\002\000\030" +
    "\004\051\013\045\016\052\063\044\064\046\072\042\101" +
    "\050\102\043\103\041\104\053\105\040\001\002\000\116" +
    "\003\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\033\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\050\uffc6\052\uffc6" +
    "\054\uffc6\065\uffc6\067\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\001\002" +
    "\000\116\003\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8\033\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\050\uffc8" +
    "\052\uffc8\054\uffc8\065\uffc8\067\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\001\002\000\030\004\051\013\045\016\052\063\044\064" +
    "\046\072\042\101\050\102\043\103\041\104\053\105\040" +
    "\001\002\000\116\003\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\033" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\044\uffc9\045\uffc9" +
    "\050\uffc9\052\uffc9\054\uffc9\065\uffc9\067\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9" +
    "\101\uffc9\001\002\000\116\003\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030" +
    "\uffc5\033\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\050\uffc5\052\uffc5\054\uffc5\065\uffc5\067\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\001\002\000\004\004\134\001\002\000" +
    "\116\003\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\033\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\042\uffc4\044\uffc4\045\uffc4\050\uffc4\052" +
    "\uffc4\054\uffc4\065\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\001" +
    "\002\000\042\014\072\015\055\017\062\020\061\021\065" +
    "\023\064\024\056\037\115\040\116\072\057\073\067\074" +
    "\060\075\066\076\063\077\071\100\070\001\002\000\116" +
    "\003\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\017\uffca\020\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\027\uffca\030\uffca\033\uffca\036\uffca\037" +
    "\uffca\040\uffca\042\uffca\044\uffca\045\uffca\050\uffca\052\uffca" +
    "\054\uffca\065\uffca\067\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\001\002" +
    "\000\030\004\051\013\045\016\052\063\044\064\046\072" +
    "\042\101\050\102\043\103\041\104\053\105\040\001\002" +
    "\000\030\004\051\013\045\016\052\063\044\064\046\072" +
    "\042\101\050\102\043\103\041\104\053\105\040\001\002" +
    "\000\116\003\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\033\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\044\uffc7\045\uffc7\050\uffc7" +
    "\052\uffc7\054\uffc7\065\uffc7\067\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\001\002\000\116\003\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\062\020\061" +
    "\021\065\023\064\024\056\025\uffd0\027\uffd0\030\uffd0\033" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\050\uffd0\052\uffd0\054\uffd0\065\uffd0\067\uffd0\071\uffd0\072" +
    "\057\073\067\074\060\075\066\076\063\077\071\100\070" +
    "\101\uffd0\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\116\003\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\055\017\062" +
    "\020\061\021\065\023\064\024\056\025\uffcf\027\uffcf\030" +
    "\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\044\uffcf" +
    "\045\uffcf\050\uffcf\052\uffcf\054\uffcf\065\uffcf\067\uffcf\071" +
    "\uffcf\072\057\073\067\074\060\075\066\076\063\077\071" +
    "\100\070\101\uffcf\001\002\000\116\003\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\023\064\024\056\025\uffd3\027" +
    "\uffd3\030\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3" +
    "\044\uffd3\045\uffd3\050\uffd3\052\uffd3\054\uffd3\065\uffd3\067" +
    "\uffd3\071\uffd3\072\057\073\067\074\060\075\066\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\001\002\000\116\003\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\020\061\021\065\023\064\024\056\025" +
    "\uffd1\027\uffd1\030\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\044\uffd1\045\uffd1\050\uffd1\052\uffd1\054\uffd1\065" +
    "\uffd1\067\uffd1\071\uffd1\072\057\073\067\074\060\075\066" +
    "\076\063\077\071\100\uffd1\101\uffd1\001\002\000\116\003" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\027\uffd9\030\uffd9\033\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\042\uffd9\044\uffd9\045\uffd9\050\uffd9\052\uffd9\054" +
    "\uffd9\065\uffd9\067\uffd9\071\uffd9\072\uffd9\073\uffd9\074\060" +
    "\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\001\002\000" +
    "\116\003\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\033\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\042\uffd7\044\uffd7\045\uffd7\050\uffd7\052" +
    "\uffd7\054\uffd7\065\uffd7\067\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\060\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\001" +
    "\002\000\116\003\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\023\064\024\056\025\uffd6\027\uffd6\030\uffd6\033\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6\050" +
    "\uffd6\052\uffd6\054\uffd6\065\uffd6\067\uffd6\071\uffd6\072\057" +
    "\073\067\074\060\075\066\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\001\002\000\116\003\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\023\uffdc\024\056\025\uffdc\027\uffdc\030\uffdc" +
    "\033\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\050\uffdc\052\uffdc\054\uffdc\065\uffdc\067\uffdc\071\uffdc" +
    "\072\uffdc\073\067\074\060\075\066\076\uffdc\077\uffdc\100" +
    "\uffdc\101\uffdc\001\002\000\116\003\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\023\064\024\056\025\uffd4\027\uffd4" +
    "\030\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\044" +
    "\uffd4\045\uffd4\050\uffd4\052\uffd4\054\uffd4\065\uffd4\067\uffd4" +
    "\071\uffd4\072\057\073\067\074\060\075\066\076\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\001\002\000\116\003\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\061\021\065\023\064\024\056\025\uffd2" +
    "\027\uffd2\030\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\042" +
    "\uffd2\044\uffd2\045\uffd2\050\uffd2\052\uffd2\054\uffd2\065\uffd2" +
    "\067\uffd2\071\uffd2\072\057\073\067\074\060\075\066\076" +
    "\063\077\071\100\uffd2\101\uffd2\001\002\000\116\003\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\023\064\024\056" +
    "\025\uffd5\027\uffd5\030\uffd5\033\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\042\uffd5\044\uffd5\045\uffd5\050\uffd5\052\uffd5\054\uffd5" +
    "\065\uffd5\067\uffd5\071\uffd5\072\057\073\067\074\060\075" +
    "\066\076\uffd5\077\uffd5\100\uffd5\101\uffd5\001\002\000\116" +
    "\003\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\030\uffd8\033\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\050\uffd8\052\uffd8" +
    "\054\uffd8\065\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8\074" +
    "\060\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\001\002" +
    "\000\116\003\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\023\uffdb\024\056\025\uffdb\027\uffdb\030\uffdb\033\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\044\uffdb\045\uffdb\050\uffdb" +
    "\052\uffdb\054\uffdb\065\uffdb\067\uffdb\071\uffdb\072\uffdb\073" +
    "\067\074\060\075\066\076\uffdb\077\uffdb\100\uffdb\101\uffdb" +
    "\001\002\000\116\003\uffda\005\uffda\006\uffda\007\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda\033" +
    "\uffda\036\uffda\037\uffda\040\uffda\042\uffda\044\uffda\045\uffda" +
    "\050\uffda\052\uffda\054\uffda\065\uffda\067\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\060\075\uffda\076\uffda\077\uffda\100\uffda" +
    "\101\uffda\001\002\000\116\003\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017\062" +
    "\020\061\021\065\023\064\024\056\025\uffce\027\uffce\030" +
    "\uffce\033\uffce\036\uffce\037\uffce\040\uffce\042\uffce\044\uffce" +
    "\045\uffce\050\uffce\052\uffce\054\uffce\065\uffce\067\uffce\071" +
    "\uffce\072\057\073\067\074\060\075\066\076\063\077\071" +
    "\100\070\101\uffce\001\002\000\040\005\112\014\072\015" +
    "\055\017\062\020\061\021\065\023\064\024\056\072\057" +
    "\073\067\074\060\075\066\076\063\077\071\100\070\001" +
    "\002\000\116\003\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\033\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\042\uffcc\044\uffcc\045\uffcc\050" +
    "\uffcc\052\uffcc\054\uffcc\065\uffcc\067\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\001\002\000\012\035\uffbb\037\uffbb\040\uffbb\066\uffbb" +
    "\001\002\000\010\037\115\040\116\066\132\001\002\000" +
    "\030\004\051\013\045\016\052\063\044\064\046\072\042" +
    "\101\050\102\043\103\041\104\053\105\040\001\002\000" +
    "\004\033\117\001\002\000\034\003\026\007\013\012\006" +
    "\027\017\030\012\036\035\042\033\044\014\050\025\052" +
    "\011\054\031\067\034\101\016\001\002\000\036\003\026" +
    "\007\013\012\006\027\017\030\012\036\035\041\122\042" +
    "\033\044\014\050\025\052\011\054\031\067\034\101\016" +
    "\001\002\000\060\002\uffff\003\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\027\uffff\030\uffff\035\uffff\036\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\046\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\067\uffff\070\uffff\101\uffff\001\002" +
    "\000\004\025\123\001\002\000\012\035\uffb9\037\uffb9\040" +
    "\uffb9\066\uffb9\001\002\000\040\014\072\015\055\017\062" +
    "\020\061\021\065\023\064\024\056\033\125\072\057\073" +
    "\067\074\060\075\066\076\063\077\071\100\070\001\002" +
    "\000\034\003\026\007\013\012\006\027\017\030\012\036" +
    "\035\042\033\044\014\050\025\052\011\054\031\067\034" +
    "\101\016\001\002\000\036\003\026\007\013\012\006\027" +
    "\017\030\012\036\035\041\127\042\033\044\014\050\025" +
    "\052\011\054\031\067\034\101\016\001\002\000\004\025" +
    "\130\001\002\000\012\035\uffba\037\uffba\040\uffba\066\uffba" +
    "\001\002\000\012\035\uffbc\037\uffbc\040\uffbc\066\uffbc\001" +
    "\002\000\004\025\133\001\002\000\060\002\uffbf\003\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\027\uffbf\030\uffbf\035" +
    "\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\067\uffbf\070" +
    "\uffbf\101\uffbf\001\002\000\030\004\051\013\045\016\052" +
    "\063\044\064\046\072\042\101\050\102\043\103\041\104" +
    "\053\105\040\001\002\000\042\005\uffc2\006\uffc2\014\072" +
    "\015\055\017\062\020\061\021\065\023\064\024\056\072" +
    "\057\073\067\074\060\075\066\076\063\077\071\100\070" +
    "\001\002\000\006\005\140\006\137\001\002\000\030\004" +
    "\051\013\045\016\052\063\044\064\046\072\042\101\050" +
    "\102\043\103\041\104\053\105\040\001\002\000\116\003" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\027\uffcb\030\uffcb\033\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\042\uffcb\044\uffcb\045\uffcb\050\uffcb\052\uffcb\054" +
    "\uffcb\065\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000" +
    "\042\005\uffc3\006\uffc3\014\072\015\055\017\062\020\061" +
    "\021\065\023\064\024\056\072\057\073\067\074\060\075" +
    "\066\076\063\077\071\100\070\001\002\000\116\003\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\056" +
    "\025\uffcd\027\uffcd\030\uffcd\033\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\044\uffcd\045\uffcd\050\uffcd\052\uffcd\054\uffcd" +
    "\065\uffcd\067\uffcd\071\uffcd\072\uffcd\073\067\074\060\075" +
    "\066\076\uffcd\077\uffcd\100\uffcd\101\uffcd\001\002\000\040" +
    "\005\144\014\072\015\055\017\062\020\061\021\065\023" +
    "\064\024\056\072\057\073\067\074\060\075\066\076\063" +
    "\077\071\100\070\001\002\000\004\034\145\001\002\000" +
    "\006\037\115\040\116\001\002\000\010\035\147\037\115" +
    "\040\116\001\002\000\004\025\150\001\002\000\060\002" +
    "\uffbd\003\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\027\uffbd" +
    "\030\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\067\uffbd\070\uffbd\101\uffbd\001\002\000\036\003\026\007" +
    "\013\012\006\027\017\030\012\036\035\042\033\044\014" +
    "\050\025\052\011\054\031\067\034\070\152\101\016\001" +
    "\002\000\030\004\051\013\045\016\052\063\044\064\046" +
    "\072\042\101\050\102\043\103\041\104\053\105\040\001" +
    "\002\000\040\014\072\015\055\017\062\020\061\021\065" +
    "\023\064\024\056\025\154\072\057\073\067\074\060\075" +
    "\066\076\063\077\071\100\070\001\002\000\060\002\uffe1" +
    "\003\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\027\uffe1\030" +
    "\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\046\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\067" +
    "\uffe1\070\uffe1\101\uffe1\001\002\000\070\003\026\007\013" +
    "\012\006\014\072\015\055\017\062\020\061\021\065\023" +
    "\064\024\056\027\017\030\012\036\035\042\033\044\014" +
    "\050\025\052\011\054\031\067\034\072\057\073\067\074" +
    "\060\075\066\076\063\077\071\100\070\101\016\001\002" +
    "\000\036\003\026\007\013\012\006\027\017\030\012\036" +
    "\035\042\033\043\157\044\014\050\025\052\011\054\031" +
    "\067\034\101\016\001\002\000\004\025\160\001\002\000" +
    "\060\002\uffe3\003\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\027\uffe3\030\uffe3\035\uffe3\036\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\067\uffe3\070\uffe3\101\uffe3\001\002\000\006\006" +
    "\uffef\055\uffef\001\002\000\006\006\163\055\164\001\002" +
    "\000\004\101\176\001\002\000\014\056\172\057\167\060" +
    "\170\061\165\062\166\001\002\000\006\022\uffeb\025\uffeb" +
    "\001\002\000\006\022\uffea\025\uffea\001\002\000\006\022" +
    "\uffed\025\uffed\001\002\000\006\022\uffec\025\uffec\001\002" +
    "\000\006\022\173\025\ufff2\001\002\000\006\022\uffee\025" +
    "\uffee\001\002\000\030\004\051\013\045\016\052\063\044" +
    "\064\046\072\042\101\050\102\043\103\041\104\053\105" +
    "\040\001\002\000\040\014\072\015\055\017\062\020\061" +
    "\021\065\023\064\024\056\025\uffe9\072\057\073\067\074" +
    "\060\075\066\076\063\077\071\100\070\001\002\000\004" +
    "\025\ufff1\001\002\000\006\006\ufff0\055\ufff0\001\002\000" +
    "\060\002\ufffc\003\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\027\ufffc\030\ufffc\035\ufffc\036\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\067\ufffc\070\ufffc\101\ufffc\001\002\000\060\002" +
    "\ufff3\003\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\027\ufff3" +
    "\030\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\067\ufff3\070\ufff3\101\ufff3\001\002\000\040\014\072\015" +
    "\055\017\062\020\061\021\065\023\064\024\056\065\202" +
    "\072\057\073\067\074\060\075\066\076\063\077\071\100" +
    "\070\001\002\000\034\003\026\007\013\012\006\027\017" +
    "\030\012\036\035\042\033\044\014\050\025\052\011\054" +
    "\031\067\034\101\016\001\002\000\040\003\026\007\013" +
    "\012\006\027\017\030\012\036\035\042\033\044\014\050" +
    "\025\051\204\052\011\053\205\054\031\067\034\101\016" +
    "\001\002\000\034\003\026\007\013\012\006\027\017\030" +
    "\012\036\035\042\033\044\014\050\025\052\011\054\031" +
    "\067\034\101\016\001\002\000\004\025\206\001\002\000" +
    "\060\002\uffe7\003\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\027\uffe7\030\uffe7\035\uffe7\036\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\067\uffe7\070\uffe7\101\uffe7\001\002\000\036\003" +
    "\026\007\013\012\006\027\017\030\012\036\035\042\033" +
    "\044\014\050\025\052\011\053\210\054\031\067\034\101" +
    "\016\001\002\000\004\025\211\001\002\000\060\002\uffe6" +
    "\003\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\027\uffe6\030" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\067" +
    "\uffe6\070\uffe6\101\uffe6\001\002\000\004\002\001\001\002" +
    "\000\034\003\026\007\013\012\006\027\017\030\012\036" +
    "\035\042\033\044\014\050\025\052\011\054\031\067\034" +
    "\101\016\001\002\000\036\003\026\007\013\012\006\027" +
    "\017\030\012\035\215\036\035\042\033\044\014\050\025" +
    "\052\011\054\031\067\034\101\016\001\002\000\004\012" +
    "\216\001\002\000\030\004\051\013\045\016\052\063\044" +
    "\064\046\072\042\101\050\102\043\103\041\104\053\105" +
    "\040\001\002\000\040\011\220\014\072\015\055\017\062" +
    "\020\061\021\065\023\064\024\056\072\057\073\067\074" +
    "\060\075\066\076\063\077\071\100\070\001\002\000\004" +
    "\025\221\001\002\000\060\002\uffc0\003\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\027\uffc0\030\uffc0\035\uffc0\036\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\067\uffc0\070\uffc0\101\uffc0" +
    "\001\002\000\030\004\051\013\045\016\052\063\044\064" +
    "\046\072\042\101\050\102\043\103\041\104\053\105\040" +
    "\001\002\000\040\014\072\015\055\017\062\020\061\021" +
    "\065\023\064\024\056\025\uffe8\072\057\073\067\074\060" +
    "\075\066\076\063\077\071\100\070\001\002\000\060\002" +
    "\ufffd\003\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\027\ufffd" +
    "\030\ufffd\035\ufffd\036\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\067\ufffd\070\ufffd\101\ufffd\001\002\000\004\022\226\001" +
    "\002\000\030\004\051\013\045\016\052\063\044\064\046" +
    "\072\042\101\050\102\043\103\041\104\053\105\040\001" +
    "\002\000\040\014\072\015\055\017\062\020\061\021\065" +
    "\023\064\024\056\045\230\072\057\073\067\074\060\075" +
    "\066\076\063\077\071\100\070\001\002\000\030\004\051" +
    "\013\045\016\052\063\044\064\046\072\042\101\050\102" +
    "\043\103\041\104\053\105\040\001\002\000\040\014\072" +
    "\015\055\017\062\020\061\021\065\023\064\024\056\071" +
    "\232\072\057\073\067\074\060\075\066\076\063\077\071" +
    "\100\070\001\002\000\030\004\051\013\045\016\052\063" +
    "\044\064\046\072\042\101\050\102\043\103\041\104\053" +
    "\105\040\001\002\000\070\003\026\007\013\012\006\014" +
    "\072\015\055\017\062\020\061\021\065\023\064\024\056" +
    "\027\017\030\012\036\035\042\033\044\014\050\025\052" +
    "\011\054\031\067\034\072\057\073\067\074\060\075\066" +
    "\076\063\077\071\100\070\101\016\001\002\000\036\003" +
    "\026\007\013\012\006\027\017\030\012\036\035\042\033" +
    "\044\014\046\235\050\025\052\011\054\031\067\034\101" +
    "\016\001\002\000\004\101\236\001\002\000\004\025\237" +
    "\001\002\000\060\002\uffc1\003\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\046\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\067\uffc1\070\uffc1\101\uffc1\001\002" +
    "\000\070\003\026\007\013\012\006\014\072\015\055\017" +
    "\062\020\061\021\065\023\064\024\056\027\017\030\012" +
    "\036\035\042\033\044\014\050\025\052\011\054\031\067" +
    "\034\072\057\073\067\074\060\075\066\076\063\077\071" +
    "\100\070\101\016\001\002\000\040\003\026\007\013\010" +
    "\242\011\243\012\006\027\017\030\012\036\035\042\033" +
    "\044\014\050\025\052\011\054\031\067\034\101\016\001" +
    "\002\000\034\003\026\007\013\012\006\027\017\030\012" +
    "\036\035\042\033\044\014\050\025\052\011\054\031\067" +
    "\034\101\016\001\002\000\004\025\244\001\002\000\060" +
    "\002\uffe5\003\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\027" +
    "\uffe5\030\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\067\uffe5\070\uffe5\101\uffe5\001\002\000\036\003\026" +
    "\007\013\011\246\012\006\027\017\030\012\036\035\042" +
    "\033\044\014\050\025\052\011\054\031\067\034\101\016" +
    "\001\002\000\004\025\247\001\002\000\060\002\uffe4\003" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\027\uffe4\030\uffe4" +
    "\035\uffe4\036\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\067\uffe4" +
    "\070\uffe4\101\uffe4\001\002\000\030\004\051\013\045\016" +
    "\052\063\044\064\046\072\042\101\050\102\043\103\041" +
    "\104\053\105\040\001\002\000\040\005\252\014\072\015" +
    "\055\017\062\020\061\021\065\023\064\024\056\072\057" +
    "\073\067\074\060\075\066\076\063\077\071\100\070\001" +
    "\002\000\004\034\253\001\002\000\006\037\115\040\116" +
    "\001\002\000\010\035\255\037\115\040\116\001\002\000" +
    "\004\025\256\001\002\000\060\002\uffbe\003\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\027\uffbe\030\uffbe\035\uffbe\036" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\067\uffbe\070\uffbe\101" +
    "\uffbe\001\002\000\042\013\260\014\072\015\055\017\062" +
    "\020\061\021\065\023\064\024\056\025\uffe0\072\057\073" +
    "\067\074\060\075\066\076\063\077\071\100\070\001\002" +
    "\000\030\004\051\013\045\016\052\063\044\064\046\072" +
    "\042\101\050\102\043\103\041\104\053\105\040\001\002" +
    "\000\006\013\263\025\uffdf\001\002\000\042\013\uffdd\014" +
    "\072\015\055\017\062\020\061\021\065\023\064\024\056" +
    "\025\uffdd\072\057\073\067\074\060\075\066\076\063\077" +
    "\071\100\070\001\002\000\030\004\051\013\045\016\052" +
    "\063\044\064\046\072\042\101\050\102\043\103\041\104" +
    "\053\105\040\001\002\000\042\013\uffde\014\072\015\055" +
    "\017\062\020\061\021\065\023\064\024\056\025\uffde\072" +
    "\057\073\067\074\060\075\066\076\063\077\071\100\070" +
    "\001\002\000\060\002\ufff5\003\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\027\ufff5\030\ufff5\035\ufff5\036\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\046\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\067\ufff5\070\ufff5\101\ufff5\001\002" +
    "\000\070\003\026\007\013\012\006\014\072\015\055\017" +
    "\062\020\061\021\065\023\064\024\056\027\017\030\012" +
    "\036\035\042\033\044\014\050\025\052\011\054\031\067" +
    "\034\072\057\073\067\074\060\075\066\076\063\077\071" +
    "\100\070\101\016\001\002\000\036\003\026\007\013\011" +
    "\270\012\006\027\017\030\012\036\035\042\033\044\014" +
    "\050\025\052\011\054\031\067\034\101\016\001\002\000" +
    "\004\025\271\001\002\000\060\002\uffe2\003\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\027\uffe2\030\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\067\uffe2\070\uffe2\101" +
    "\uffe2\001\002\000\060\002\ufff4\003\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\027\ufff4\030\ufff4\035\ufff4\036\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\067\ufff4\070\ufff4\101\ufff4\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\034\002\017\003\003\004\007\005\014\006" +
    "\022\007\023\010\006\013\026\014\021\015\031\020\027" +
    "\024\004\026\020\001\001\000\030\004\120\005\014\006" +
    "\022\007\023\010\006\013\026\014\021\015\031\020\027" +
    "\024\004\026\020\001\001\000\002\001\001\000\004\011" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\256\001\001\000\002\001\001\000\004\011\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\161\001\001\000\002\001\001" +
    "\000\004\011\154\001\001\000\032\003\150\004\007\005" +
    "\014\006\022\007\023\010\006\013\026\014\021\015\031" +
    "\020\027\024\004\026\020\001\001\000\002\001\001\000" +
    "\004\011\142\001\001\000\004\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\113\017\112\001\001\000\002\001" +
    "\001\000\004\011\110\001\001\000\004\011\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\107\001" +
    "\001\000\004\011\106\001\001\000\004\011\105\001\001" +
    "\000\004\011\104\001\001\000\004\011\103\001\001\000" +
    "\004\011\102\001\001\000\004\011\101\001\001\000\004" +
    "\011\100\001\001\000\004\011\077\001\001\000\004\011" +
    "\076\001\001\000\004\011\075\001\001\000\004\011\074" +
    "\001\001\000\004\011\073\001\001\000\004\011\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\130\001\001\000\004\011" +
    "\123\001\001\000\002\001\001\000\032\003\117\004\007" +
    "\005\014\006\022\007\023\010\006\013\026\014\021\015" +
    "\031\020\027\024\004\026\020\001\001\000\030\004\120" +
    "\005\014\006\022\007\023\010\006\013\026\014\021\015" +
    "\031\020\027\024\004\026\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\125\004\007\005\014\006\022\007\023\010\006" +
    "\013\026\014\021\015\031\020\027\024\004\026\020\001" +
    "\001\000\030\004\120\005\014\006\022\007\023\010\006" +
    "\013\026\014\021\015\031\020\027\024\004\026\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\134\012" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\145\017\112\001\001\000\004\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\120\005\014" +
    "\006\022\007\023\010\006\013\026\014\021\015\031\020" +
    "\027\024\004\026\020\001\001\000\004\011\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\155\004" +
    "\007\005\014\006\022\007\023\010\006\013\026\014\021" +
    "\015\031\020\027\024\004\026\020\001\001\000\030\004" +
    "\120\005\014\006\022\007\023\010\006\013\026\014\021" +
    "\015\031\020\027\024\004\026\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\173\023" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\202\004\007\005\014\006\022\007\023" +
    "\010\006\013\026\014\021\015\031\020\027\024\004\026" +
    "\020\001\001\000\030\004\120\005\014\006\022\007\023" +
    "\010\006\013\026\014\021\015\031\020\027\024\004\026" +
    "\020\001\001\000\032\003\206\004\007\005\014\006\022" +
    "\007\023\010\006\013\026\014\021\015\031\020\027\024" +
    "\004\026\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\120\005\014\006\022\007\023\010\006\013" +
    "\026\014\021\015\031\020\027\024\004\026\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\213\004\007\005\014\006\022\007\023\010\006" +
    "\013\026\014\021\015\031\020\027\024\004\026\020\001" +
    "\001\000\030\004\120\005\014\006\022\007\023\010\006" +
    "\013\026\014\021\015\031\020\027\024\004\026\020\001" +
    "\001\000\002\001\001\000\004\011\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\226\001\001\000\002\001\001\000" +
    "\004\011\230\001\001\000\002\001\001\000\004\011\232" +
    "\001\001\000\032\003\233\004\007\005\014\006\022\007" +
    "\023\010\006\013\026\014\021\015\031\020\027\024\004" +
    "\026\020\001\001\000\030\004\120\005\014\006\022\007" +
    "\023\010\006\013\026\014\021\015\031\020\027\024\004" +
    "\026\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\240\004\007\005\014\006\022" +
    "\007\023\010\006\013\026\014\021\015\031\020\027\024" +
    "\004\026\020\001\001\000\030\004\120\005\014\006\022" +
    "\007\023\010\006\013\026\014\021\015\031\020\027\024" +
    "\004\026\020\001\001\000\032\003\244\004\007\005\014" +
    "\006\022\007\023\010\006\013\026\014\021\015\031\020" +
    "\027\024\004\026\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\120\005\014\006\022\007\023\010" +
    "\006\013\026\014\021\015\031\020\027\024\004\026\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\253\017\112\001\001\000\004\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\261\025\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\266\004\007\005\014\006\022\007" +
    "\023\010\006\013\026\014\021\015\031\020\027\024\004" +
    "\026\020\001\001\000\030\004\120\005\014\006\022\007" +
    "\023\010\006\013\026\014\021\015\031\020\027\024\004" +
    "\026\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo instrucciones;
    
    // Tabla de símbolos para almacenar variables
    public static java.util.Map<String, Variable> tablaSimbolos = new java.util.HashMap<>();
    
    // Clase para representar variables
    public static class Variable {
        public String nombre;
        public String tipo;
        public String ambito;
        public Object valor;
        
        public Variable(String nombre, String tipo, String ambito, Object valor) {
            this.nombre = nombre;
            this.tipo = tipo;
            this.ambito = ambito;
            this.valor = valor;
        }
        
        @Override
        public String toString() {
            return nombre + "\t" + tipo + "\t" + ambito + "\t" + (valor == null ? "" : valor.toString());
        }
    }
    
    // Método para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos() {
        System.out.println("\nTabla de variables:");
        System.out.println("Nombre\tTipo\tÁmbito\tValor final");
        System.out.println("----------------------------------------");
        
        for (Variable var : tablaSimbolos.values()) {
            System.out.println(var);
        }
    }
    
    // Método para verificar compatibilidad de tipos
    public boolean esCompatible(String tipo, Object valor) {
        if (valor == null) return true;
        
        switch (tipo) {
            case "int":
                return valor instanceof Integer;
            case "double":
                return valor instanceof Double || valor instanceof Integer;
            case "char":
                return valor instanceof Character;
            case "string":
                return valor instanceof String;
            case "boolean":
                return valor instanceof Boolean;
            default:
                return false;
        }
    }
    
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico en línea " + s.left + ", columna " + s.right + ": Símbolo inesperado \"" + s.value + "\"");
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error sintáctico fatal en línea " + s.left + ", columna " + s.right + ": Símbolo inesperado \"" + s.value + "\"");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


    // Ámbito actual para las variables
    private String ambitoActual = "-";
    
    // Contador para ámbitos anidados
    private int contadorAmbito = 0;
    
    // Método para generar un nuevo ámbito
    private String nuevoAmbito(String prefijo) {
        contadorAmbito++;
        return prefijo + contadorAmbito;
    }

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    parser.instrucciones = insts;
    parser.imprimirTablaSimbolos();

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = insts;
    nodo.hijos.add(inst);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("Instruccion");
    nodo.hijos.add(inst);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion_variable PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= if 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= while 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= for 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= doWhile 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= hacer_mientras 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= switch 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= imprimir PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= imprimir_concat PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= error PUNTO_COMA 
            {
              Nodo RESULT =null;
		
    Nodo n = new Nodo("Error");
    RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_variable ::= DIM lista_variables COMO tipo_variable 
            {
              Nodo RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo vars = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("declaracion");
    nodo.hijos.add(vars);
    nodo.hijos.add(tipo);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_variable ::= DIM lista_variables COMO tipo_variable IGUAL valor_inicial 
            {
              Nodo RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo vars = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("declaracion_con_valor");
    nodo.hijos.add(vars);
    nodo.hijos.add(tipo);
    nodo.hijos.add(valor);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_variables ::= lista_variables COMA ID 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = lista;
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_variables ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("variables");
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_variable ::= INT 
            {
              Nodo RESULT =null;
		
    RESULT = new Nodo("int");

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_variable ::= CHAR 
            {
              Nodo RESULT =null;
		
    RESULT = new Nodo("char");

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_variable ::= BOOLEAN 
            {
              Nodo RESULT =null;
		
    RESULT = new Nodo("boolean");

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_variable ::= STRING 
            {
              Nodo RESULT =null;
		
    RESULT = new Nodo("string");

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_variable ::= DOUBLE 
            {
              Nodo RESULT =null;
		
    RESULT = new Nodo("double");

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_inicial ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("valor_inicial",17, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    Nodo inst = new Nodo("asignacion");
    inst.hijos.add(nodoId);
    inst.hijos.add(expr);
    RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= SI expresion ENTONCES instrucciones FINSI PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= SI expresion ENTONCES instrucciones NO instrucciones FINSI PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("if-else");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    nodo.hijos.add(insts2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF expresion instrucciones END PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF expresion instrucciones ELSE instrucciones END PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("if-else");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    nodo.hijos.add(insts2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while ::= MIENTRAS expresion instrucciones FINMIENTRAS PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("while");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // while ::= WHILE expresion instrucciones END PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("while");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // hacer_mientras ::= HACER instrucciones REPETIRMIENTRAS expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    Nodo nodo = new Nodo("do-while");
    nodo.hijos.add(insts);
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("hacer_mientras",20, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imprimir ::= IMPRIMIR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("imprimir");
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir_concat ::= IMPRIMIR expresion CONCAT lista_expresiones_concat 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("imprimir_concat");
    nodo.hijos.add(expr);
    nodo.hijos.add(lista);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir_concat",18, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_expresiones_concat ::= lista_expresiones_concat CONCAT expresion 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = lista;
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones_concat",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_expresiones_concat ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("expresiones_concat");
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones_concat",19, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("+");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("-");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("*");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion DIVISION expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("/");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("^");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("%");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo(">");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("<");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo(">=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("<=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("==");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion DIFERENTE expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("!=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= NOT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("not");
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion OR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("or");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion AND expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("and");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("negativo");
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= CONCAT PARENTESIS_ABIERTO expresiones PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    Nodo nodo = new Nodo("concatenar");
    nodo.hijos.add(exprs);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("variable");
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Integer entero = (Integer)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("entero");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(entero.toString()));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Double decimal = (Double)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("decimal");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(decimal.toString()));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= CARACTER 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Character caracter = (Character)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("caracter");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(caracter.toString()));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("cadena");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(cadena));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("boolean");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo("true"));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("boolean");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo("false"));
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones ::= expresiones COMA expresion 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = exprs;
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresiones ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("Expresion");
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= PARA ID IGUAL expresion HASTA expresion PASO expresion instrucciones SIGUIENTE ID PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		Nodo inicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		Nodo limite = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo paso = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    // Verificar que los IDs coincidan
    if (!id.equals(id2)) {
        System.out.println("Error: Los identificadores en Para y Siguiente deben coincidir");
    }
    
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(limite);
    nodo.hijos.add(paso);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // doWhile ::= DO LLAVE_ABIERTA instrucciones LLAVE_CERRADA WHILE expresion END PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("do-while");
    nodo.hijos.add(insts);
    nodo.hijos.add(expr);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("doWhile",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch ::= SELECCIONAR CASO expresion casos FINSELECCIONAR PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch ::= SWITCH PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos LLAVE_CERRADA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // switch ::= SELECCIONAR PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos LLAVE_CERRADA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // casos ::= casos caso 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = cs;
    nodo.hijos.add(c);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // casos ::= caso 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    Nodo nodo = new Nodo("casos");
    nodo.hijos.add(c);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // caso ::= CASO expresion DOS_PUNTOS instrucciones FINCASO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("caso");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // caso ::= CONTRARIO DOS_PUNTOS instrucciones FINCASO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    Nodo nodo = new Nodo("default");
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
