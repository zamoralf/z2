package arbolast;
import java_cup.runtime.Symbol;

parser code
{:
    public Nodo instrucciones;
    
    // Tabla de símbolos para almacenar variables
    public static java.util.Map<String, Variable> tablaSimbolos = new java.util.HashMap<>();
    
    // Clase para representar variables
    public static class Variable {
        public String nombre;
        public String tipo;
        public String ambito;
        public Object valor;
        
        public Variable(String nombre, String tipo, String ambito, Object valor) {
            this.nombre = nombre;
            this.tipo = tipo;
            this.ambito = ambito;
            this.valor = valor;
        }
        
        @Override
        public String toString() {
            return nombre + "\t" + tipo + "\t" + ambito + "\t" + (valor == null ? "" : valor.toString());
        }
    }
    
    // Método para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos() {
        System.out.println("\nTabla de variables:");
        System.out.println("Nombre\tTipo\tÁmbito\tValor final");
        System.out.println("----------------------------------------");
        
        for (Variable var : tablaSimbolos.values()) {
            System.out.println(var);
        }
    }
    
    // Método para verificar compatibilidad de tipos
    public boolean esCompatible(String tipo, Object valor) {
        if (valor == null) return true;
        
        switch (tipo) {
            case "int":
                return valor instanceof Integer;
            case "double":
                return valor instanceof Double || valor instanceof Integer;
            case "char":
                return valor instanceof Character;
            case "string":
                return valor instanceof String;
            case "boolean":
                return valor instanceof Boolean;
            default:
                return false;
        }
    }
    
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico en línea " + s.left + ", columna " + s.right + ": Símbolo inesperado \"" + s.value + "\"");
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error sintáctico fatal en línea " + s.left + ", columna " + s.right + ": Símbolo inesperado \"" + s.value + "\"");
    }
:}

action code
{:
    // Ámbito actual para las variables
    private String ambitoActual = "-";
    
    // Contador para ámbitos anidados
    private int contadorAmbito = 0;
    
    // Método para generar un nuevo ámbito
    private String nuevoAmbito(String prefijo) {
        contadorAmbito++;
        return prefijo + contadorAmbito;
    }
:}

// Terminales
terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, IF, ELSE, END, WHILE,
    CONCAT, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, PUNTO_COMA, FOR, DO, SWITCH, CASE, DEFAULT, DOS_PUNTOS,
    LLAVE_ABIERTA, LLAVE_CERRADA, SELECCIONAR, CASO, CONTRARIO, FINCASO,
    MIENTRAS, FINMIENTRAS, PARA, HASTA, SIGUIENTE, FINPARA, SI, NO, IMPRIMIR, FINSI;

// Nuevos terminales para NeoScript
terminal DIM, COMO, INT, CHAR, BOOLEAN, STRING, DOUBLE, TRUE, FALSE, ENTONCES,
    FINSELECCIONAR, HACER, REPETIRMIENTRAS, PASO, MENOS, DIVISION, POTENCIA, MODULO,
    MAYOR_IGUAL, MENOR_IGUAL, DIFERENTE;

// Terminales con valor
terminal String ID;
terminal Integer ENTERO;
terminal Double DECIMAL;
terminal Character CARACTER;
terminal String CADENA;

// No terminales
non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, if, while, imprimir,
    expresion, expresiones, for, doWhile, switch, casos, caso;

// Nuevos no terminales para NeoScript
non terminal Nodo declaracion_variable, lista_variables, tipo_variable, valor_inicial;
non terminal Nodo imprimir_concat, lista_expresiones_concat;
non terminal Nodo hacer_mientras;

// Precedencia de operadores
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL, DIFERENTE;
precedence left MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
precedence left MAS, MENOS;
precedence left ASTERISCO, DIVISION, MODULO;
precedence right POTENCIA;
precedence right IGUAL;

start with inicio;

inicio ::= instrucciones:insts
{:
    parser.instrucciones = insts;
    parser.imprimirTablaSimbolos();
:};

instrucciones ::= instrucciones:insts instruccion:inst
{:
    Nodo nodo = insts;
    nodo.hijos.add(inst);
    RESULT = nodo;
:}
    | instruccion:inst
{:
    Nodo nodo = new Nodo("Instruccion");
    nodo.hijos.add(inst);
    RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst PUNTO_COMA
{:
    RESULT = inst;
:}
    | declaracion_variable:inst PUNTO_COMA
{:
    RESULT = inst;
:}
    | if:inst
{:
    RESULT = inst;
:}
    | while:inst
{:
    RESULT = inst;
:}
    | for:inst
{:
    RESULT = inst;
:}
    | doWhile:inst
{:
    RESULT = inst;
:}
    | hacer_mientras:inst
{:
    RESULT = inst;
:}
    | switch:inst
{:
    RESULT = inst;
:}
    | imprimir:inst PUNTO_COMA
{:
    RESULT = inst;
:}
    | imprimir_concat:inst PUNTO_COMA
{:
    RESULT = inst;
:}
    | error PUNTO_COMA
{:
    Nodo n = new Nodo("Error");
    RESULT = n;
:}
    ;

// Declaración de variables
declaracion_variable ::= DIM lista_variables:vars COMO tipo_variable:tipo
{:
    Nodo nodo = new Nodo("declaracion");
    nodo.hijos.add(vars);
    nodo.hijos.add(tipo);
    RESULT = nodo;
:}
    | DIM lista_variables:vars COMO tipo_variable:tipo IGUAL valor_inicial:valor
{:
    Nodo nodo = new Nodo("declaracion_con_valor");
    nodo.hijos.add(vars);
    nodo.hijos.add(tipo);
    nodo.hijos.add(valor);
    RESULT = nodo;
:}
    ;

lista_variables ::= lista_variables:lista COMA ID:id
{:
    Nodo nodo = lista;
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;
:}
    | ID:id
{:
    Nodo nodo = new Nodo("variables");
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;
:}
    ;

tipo_variable ::= INT
{:
    RESULT = new Nodo("int");
:}
    | CHAR
{:
    RESULT = new Nodo("char");
:}
    | BOOLEAN
{:
    RESULT = new Nodo("boolean");
:}
    | STRING
{:
    RESULT = new Nodo("string");
:}
    | DOUBLE
{:
    RESULT = new Nodo("double");
:}
    ;

valor_inicial ::= expresion:expr
{:
    RESULT = expr;
:}
    ;

asignacion ::= ID:id IGUAL expresion:expr
{:
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    Nodo inst = new Nodo("asignacion");
    inst.hijos.add(nodoId);
    inst.hijos.add(expr);
    RESULT = inst;
:}
    ;

if ::= SI expresion:expr ENTONCES instrucciones:insts FINSI PUNTO_COMA
{:
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    | SI expresion:expr ENTONCES instrucciones:insts NO instrucciones:insts2 FINSI PUNTO_COMA
{:
    Nodo nodo = new Nodo("if-else");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    nodo.hijos.add(insts2);
    RESULT = nodo;
:}
    | IF expresion:expr instrucciones:insts END PUNTO_COMA
{:
    Nodo nodo = new Nodo("if");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    | IF expresion:expr instrucciones:insts ELSE instrucciones:insts2 END PUNTO_COMA
{:
    Nodo nodo = new Nodo("if-else");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    nodo.hijos.add(insts2);
    RESULT = nodo;
:}
    ;

while ::= MIENTRAS expresion:expr instrucciones:insts FINMIENTRAS PUNTO_COMA
{:
    Nodo nodo = new Nodo("while");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    | WHILE expresion:expr instrucciones:insts END PUNTO_COMA
{:
    Nodo nodo = new Nodo("while");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    ;

hacer_mientras ::= HACER instrucciones:insts REPETIRMIENTRAS expresion:expr PUNTO_COMA
{:
    Nodo nodo = new Nodo("do-while");
    nodo.hijos.add(insts);
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    ;

imprimir ::= IMPRIMIR expresion:expr
{:
    Nodo nodo = new Nodo("imprimir");
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    ;

imprimir_concat ::= IMPRIMIR expresion:expr CONCAT lista_expresiones_concat:lista
{:
    Nodo nodo = new Nodo("imprimir_concat");
    nodo.hijos.add(expr);
    nodo.hijos.add(lista);
    RESULT = nodo;
:}
    ;

lista_expresiones_concat ::= lista_expresiones_concat:lista CONCAT expresion:expr
{:
    Nodo nodo = lista;
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    | expresion:expr
{:
    Nodo nodo = new Nodo("expresiones_concat");
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
    Nodo nodo = new Nodo("+");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MENOS expresion:expr2
{:
    Nodo nodo = new Nodo("-");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
    Nodo nodo = new Nodo("*");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr DIVISION expresion:expr2
{:
    Nodo nodo = new Nodo("/");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr POTENCIA expresion:expr2
{:
    Nodo nodo = new Nodo("^");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MODULO expresion:expr2
{:
    Nodo nodo = new Nodo("%");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
    Nodo nodo = new Nodo(">");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
    Nodo nodo = new Nodo("<");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MAYOR_IGUAL expresion:expr2
{:
    Nodo nodo = new Nodo(">=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr MENOR_IGUAL expresion:expr2
{:
    Nodo nodo = new Nodo("<=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
    Nodo nodo = new Nodo("==");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr DIFERENTE expresion:expr2
{:
    Nodo nodo = new Nodo("!=");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | NOT expresion:expr
{:
    Nodo nodo = new Nodo("not");
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    | expresion:expr OR expresion:expr2
{:
    Nodo nodo = new Nodo("or");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | expresion:expr AND expresion:expr2
{:
    Nodo nodo = new Nodo("and");
    nodo.hijos.add(expr);
    nodo.hijos.add(expr2);
    RESULT = nodo;
:}
    | MENOS expresion:expr
{:
    Nodo nodo = new Nodo("negativo");
    nodo.hijos.add(expr);
    RESULT = nodo;
:} %prec MENOS
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
    RESULT = expr;
:}
    | CONCAT PARENTESIS_ABIERTO expresiones:exprs PARENTESIS_CERRADO
{:
    Nodo nodo = new Nodo("concatenar");
    nodo.hijos.add(exprs);
    RESULT = nodo;
:}
    | ID:id
{:
    Nodo nodo = new Nodo("variable");
    nodo.hijos.add(new Nodo(id));
    RESULT = nodo;
:}
    | ENTERO:entero
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("entero");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(entero.toString()));
    RESULT = nodo;
:}
    | DECIMAL:decimal
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("decimal");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(decimal.toString()));
    RESULT = nodo;
:}
    | CARACTER:caracter
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("caracter");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(caracter.toString()));
    RESULT = nodo;
:}
    | CADENA:cadena
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("cadena");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo(cadena));
    RESULT = nodo;
:}
    | TRUE
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("boolean");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo("true"));
    RESULT = nodo;
:}
    | FALSE
{:
    Nodo nodo = new Nodo("valor");
    Nodo tipo = new Nodo("boolean");
    nodo.hijos.add(tipo);
    tipo.hijos.add(new Nodo("false"));
    RESULT = nodo;
:}
    ;

expresiones ::= expresiones:exprs COMA expresion:expr
{:
    Nodo nodo = exprs;
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    | expresion:expr
{:
    Nodo nodo = new Nodo("Expresion");
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    ;

for ::= PARA ID:id IGUAL expresion:inicial HASTA expresion:limite PASO expresion:paso instrucciones:insts SIGUIENTE ID:id2 PUNTO_COMA
{:
    // Verificar que los IDs coincidan
    if (!id.equals(id2)) {
        System.out.println("Error: Los identificadores en Para y Siguiente deben coincidir");
    }
    
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(limite);
    nodo.hijos.add(paso);
    nodo.hijos.add(insts);
    RESULT = nodo;
:};

doWhile ::= DO LLAVE_ABIERTA instrucciones:insts LLAVE_CERRADA WHILE expresion:expr END PUNTO_COMA
{:
    Nodo nodo = new Nodo("do-while");
    nodo.hijos.add(insts);
    nodo.hijos.add(expr);
    RESULT = nodo;
:}
    ;

switch ::= SELECCIONAR CASO expresion:expr casos:cs FINSELECCIONAR PUNTO_COMA
{:
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;
:}
    | SWITCH PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTA casos:cs LLAVE_CERRADA PUNTO_COMA
{:
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;
:}
    | SELECCIONAR PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTA casos:cs LLAVE_CERRADA PUNTO_COMA
{:
    Nodo nodo = new Nodo("switch");
    nodo.hijos.add(expr);
    nodo.hijos.add(cs);
    RESULT = nodo;
:}
    ;

casos ::= casos:cs caso:c 
{:
    Nodo nodo = cs;
    nodo.hijos.add(c);
    RESULT = nodo;
:}
    | caso:c 
{:
    Nodo nodo = new Nodo("casos");
    nodo.hijos.add(c);
    RESULT = nodo;
:}
;

caso ::= CASO expresion:expr DOS_PUNTOS instrucciones:insts FINCASO PUNTO_COMA
{:
    Nodo nodo = new Nodo("caso");
    nodo.hijos.add(expr);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    | CONTRARIO DOS_PUNTOS instrucciones:insts FINCASO PUNTO_COMA
{:
    Nodo nodo = new Nodo("default");
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
;