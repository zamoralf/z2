package arbolast;
import java_cup.runtime.Symbol;

parser code
{:
    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }
:}

action code
{:
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, IF, ELSE, END, WHILE,
    CONCAT, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, PUNTO_COMA, FOR, DO, SWITCH, CASE, DEFAULT, DOS_PUNTOS,
    LLAVE_ABIERTA, LLAVE_CERRADA, SELECCIONAR, CASO, CONTRARIO, FINCASO,
    MIENTRAS, FINMIENTRAS, PARA, HASTA, SIGUIENTE, FINPARA, SI, NO, IMPRIMIR, FINSI;

terminal String ENTERO, CADENA, ID;

non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, if, while, imprimir,
    expresion, expresiones, for, doWhile, switch, casos, caso, opt_end;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left MAS;
precedence left ASTERISCO;
precedence right IGUAL;

start with inicio;

inicio ::= instrucciones:insts
{:
parser.instrucciones = insts;
:};

instrucciones ::= instrucciones:insts instruccion:inst
{:
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;
:}
    | instruccion:inst
{:
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst
{:
RESULT = inst;
:}
    | if:inst
{:
RESULT = inst;
:}
    | while:inst
{:
RESULT = inst;
:}
    | for:inst
{:
RESULT = inst;
:}
    | doWhile:inst
{:
RESULT = inst;
:}
    | switch:inst
{:
RESULT = inst;
:}
    | imprimir:inst
{:
RESULT = inst;
:}
    | error{:
Nodo n = new Nodo("Error");
RESULT = n;
:}
    ;

asignacion ::= ID:id IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    ;

if ::= IF expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | IF expresion:expr instrucciones:insts ELSE instrucciones:insts2 END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;
:}
    | SI expresion:expr instrucciones:insts FINSI
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | SI expresion:expr instrucciones:insts NO instrucciones:insts2 FINSI
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;
:}
    ;

while ::= WHILE expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | MIENTRAS expresion:expr instrucciones:insts FINMIENTRAS
{:
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ;

imprimir ::= IMPRIMIR expresion:expr
{:
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | SIGUIENTE expresion:expr
{:
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | NOT expresion:expr
{:
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr OR expresion:expr2
{:
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr AND expresion:expr2
{:
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
RESULT = expr;
:}
    | CONCAT PARENTESIS_ABIERTO expresiones:exprs PARENTESIS_CERRADO
{:
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;
:}
    | ID:id
{:
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ENTERO:entero
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;
:}
    | CADENA:cadena
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;
:}
    ;

expresiones ::= expresiones:exprs COMA expresion:expr
{:
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr
{:
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;

for ::= FOR PARENTESIS_ABIERTO ID:id IGUAL expresion:inicial PUNTO_COMA expresion:cond PUNTO_COMA expresion:incremento PARENTESIS_CERRADO instrucciones:insts END
{:
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(cond);
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;
:}
    | PARA PARENTESIS_ABIERTO ID:id IGUAL expresion:inicial PUNTO_COMA expresion:var HASTA expresion:limite PUNTO_COMA expresion:incremento PARENTESIS_CERRADO instrucciones:insts FINPARA
{:
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    
    Nodo condicion = new Nodo("<");
    condicion.hijos.add(var);
    condicion.hijos.add(limite);
    nodo.hijos.add(condicion);
    
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;
:};

doWhile ::= DO LLAVE_ABIERTA instrucciones:insts LLAVE_CERRADA WHILE expresion:expr END
{:
Nodo nodo = new Nodo("do-while");
nodo.hijos.add(insts);
nodo.hijos.add(expr);
RESULT = nodo;
:};

switch ::= SWITCH PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTA casos:cs LLAVE_CERRADA 
           {: Nodo nodo = new Nodo("switch"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; :}
         | SELECCIONAR PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO LLAVE_ABIERTA casos:cs LLAVE_CERRADA 
           {: Nodo nodo = new Nodo("switch"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; :};

casos ::= casos:cs caso:c 
          {: Nodo nodo = cs; 
             nodo.hijos.add(c); 
             RESULT = nodo; :} 
        | caso:c 
          {: Nodo nodo = new Nodo("casos"); 
             nodo.hijos.add(c); 
             RESULT = nodo; :};

caso ::= CASE expresion:expr DOS_PUNTOS instrucciones:insts opt_end
         {: Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :} 
       | DEFAULT DOS_PUNTOS instrucciones:insts opt_end
         {: Nodo nodo = new Nodo("default"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :}
       | CASO expresion:expr DOS_PUNTOS instrucciones:insts FINCASO
         {: Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :} 
       | CONTRARIO DOS_PUNTOS instrucciones:insts FINCASO
         {: Nodo nodo = new Nodo("default"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; :};

opt_end ::= END | FINCASO | FINMIENTRAS | FINPARA | FINSI | /* empty */ ;