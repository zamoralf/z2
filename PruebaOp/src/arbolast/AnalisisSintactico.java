
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package arbolast;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\005\000\002\006\006\000\002\006\010\000\002\006" +
    "\006\000\002\006\010\000\002\007\006\000\002\007\006" +
    "\000\002\010\004\000\002\010\004\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\016\000\002\013\020\000\002" +
    "\014\011\000\002\015\011\000\002\015\011\000\002\016" +
    "\004\000\002\016\003\000\002\017\007\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\034\003\024\007\012\012\005\026\030\027" +
    "\016\030\011\036\032\042\031\044\013\046\025\050\023" +
    "\052\010\056\014\001\002\000\036\002\000\003\024\007" +
    "\012\012\005\026\030\027\016\030\011\036\032\042\031" +
    "\044\013\046\025\050\023\052\010\056\014\001\002\000" +
    "\016\004\037\013\036\016\035\054\040\055\041\056\034" +
    "\001\002\000\066\002\ufff7\003\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\056\ufff7\001\002\000\066\002\ufffe\003\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\056\ufffe\001\002\000\016\004" +
    "\037\013\036\016\035\054\040\055\041\056\034\001\002" +
    "\000\004\004\211\001\002\000\016\004\037\013\036\016" +
    "\035\054\040\055\041\056\034\001\002\000\004\004\166" +
    "\001\002\000\004\022\164\001\002\000\066\002\ufffd\003" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\056\ufffd\001\002\000" +
    "\004\034\156\001\002\000\004\002\155\001\002\000\066" +
    "\002\ufff9\003\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\056\ufff9" +
    "\001\002\000\066\002\ufffc\003\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\056\ufffc\001\002\000\066\002\ufffb\003\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\056\ufffb\001\002\000\016\004" +
    "\037\013\036\016\035\054\040\055\041\056\034\001\002" +
    "\000\066\002\ufff6\003\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\056\ufff6\001\002\000\016\004\037\013\036\016\035\054" +
    "\040\055\041\056\034\001\002\000\066\002\ufffa\003\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\056\ufffa\001\002\000\066" +
    "\002\ufff8\003\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\056\ufff8" +
    "\001\002\000\004\004\133\001\002\000\016\004\037\013" +
    "\036\016\035\054\040\055\041\056\034\001\002\000\004" +
    "\004\033\001\002\000\016\004\037\013\036\016\035\054" +
    "\040\055\041\056\034\001\002\000\116\002\uffe2\003\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\056\uffe2\001\002\000\016\004\037" +
    "\013\036\016\035\054\040\055\041\056\034\001\002\000" +
    "\004\004\121\001\002\000\016\004\037\013\036\016\035" +
    "\054\040\055\041\056\034\001\002\000\116\002\uffe1\003" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\056\uffe1\001\002\000\116\002" +
    "\uffe0\003\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\056\uffe0\001\002\000" +
    "\022\005\051\014\052\015\046\017\045\020\047\021\050" +
    "\023\044\024\043\001\002\000\016\004\037\013\036\016" +
    "\035\054\040\055\041\056\034\001\002\000\016\004\037" +
    "\013\036\016\035\054\040\055\041\056\034\001\002\000" +
    "\016\004\037\013\036\016\035\054\040\055\041\056\034" +
    "\001\002\000\016\004\037\013\036\016\035\054\040\055" +
    "\041\056\034\001\002\000\016\004\037\013\036\016\035" +
    "\054\040\055\041\056\034\001\002\000\016\004\037\013" +
    "\036\016\035\054\040\055\041\056\034\001\002\000\004" +
    "\034\054\001\002\000\016\004\037\013\036\016\035\054" +
    "\040\055\041\056\034\001\002\000\116\002\uffe6\003\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014" +
    "\uffe6\015\046\017\045\020\047\021\050\023\044\024\043" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\056\uffe6\001\002\000\012\031\060" +
    "\032\055\037\061\040\062\001\002\000\004\033\106\001" +
    "\002\000\014\031\060\032\055\035\105\037\061\040\062" +
    "\001\002\000\014\031\uffd7\032\uffd7\035\uffd7\037\uffd7\040" +
    "\uffd7\001\002\000\016\004\037\013\036\016\035\054\040" +
    "\055\041\056\034\001\002\000\016\004\037\013\036\016" +
    "\035\054\040\055\041\056\034\001\002\000\004\033\063" +
    "\001\002\000\034\003\024\007\012\012\005\026\030\027" +
    "\016\030\011\036\032\042\031\044\013\046\025\050\023" +
    "\052\010\056\014\001\002\000\036\003\024\007\012\012" +
    "\005\026\030\027\016\030\011\036\032\041\066\042\031" +
    "\044\013\046\025\050\023\052\010\056\014\001\002\000" +
    "\066\002\uffff\003\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\035\uffff\036" +
    "\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\056" +
    "\uffff\001\002\000\014\031\uffd3\032\uffd3\035\uffd3\037\uffd3" +
    "\040\uffd3\001\002\000\022\014\052\015\046\017\045\020" +
    "\047\021\050\023\044\024\043\033\070\001\002\000\034" +
    "\003\024\007\012\012\005\026\030\027\016\030\011\036" +
    "\032\042\031\044\013\046\025\050\023\052\010\056\014" +
    "\001\002\000\036\003\024\007\012\012\005\026\030\027" +
    "\016\030\011\036\032\041\072\042\031\044\013\046\025" +
    "\050\023\052\010\056\014\001\002\000\014\031\uffd4\032" +
    "\uffd4\035\uffd4\037\uffd4\040\uffd4\001\002\000\022\014\052" +
    "\015\046\017\045\020\047\021\050\023\044\024\043\033" +
    "\074\001\002\000\034\003\024\007\012\012\005\026\030" +
    "\027\016\030\011\036\032\042\031\044\013\046\025\050" +
    "\023\052\010\056\014\001\002\000\060\003\024\007\012" +
    "\011\076\012\005\026\030\027\016\030\011\031\uffcd\032" +
    "\uffcd\035\uffcd\036\032\037\uffcd\040\uffcd\041\103\042\031" +
    "\043\100\044\013\046\025\047\101\050\023\052\010\053" +
    "\102\056\014\001\002\000\014\031\uffd2\032\uffd2\035\uffd2" +
    "\037\uffd2\040\uffd2\001\002\000\014\031\uffd6\032\uffd6\035" +
    "\uffd6\037\uffd6\040\uffd6\001\002\000\014\031\uffd0\032\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\001\002\000\014\031\uffcf\032" +
    "\uffcf\035\uffcf\037\uffcf\040\uffcf\001\002\000\014\031\uffce" +
    "\032\uffce\035\uffce\037\uffce\040\uffce\001\002\000\014\031" +
    "\uffd1\032\uffd1\035\uffd1\037\uffd1\040\uffd1\001\002\000\014" +
    "\031\uffd8\032\uffd8\035\uffd8\037\uffd8\040\uffd8\001\002\000" +
    "\066\002\uffd9\003\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\056" +
    "\uffd9\001\002\000\034\003\024\007\012\012\005\026\030" +
    "\027\016\030\011\036\032\042\031\044\013\046\025\050" +
    "\023\052\010\056\014\001\002\000\060\003\024\007\012" +
    "\011\076\012\005\026\030\027\016\030\011\031\uffcd\032" +
    "\uffcd\035\uffcd\036\032\037\uffcd\040\uffcd\041\103\042\031" +
    "\043\100\044\013\046\025\047\101\050\023\052\010\053" +
    "\102\056\014\001\002\000\014\031\uffd5\032\uffd5\035\uffd5" +
    "\037\uffd5\040\uffd5\001\002\000\116\002\uffea\003\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea" +
    "\015\uffea\017\uffea\020\uffea\021\uffea\023\044\024\043\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\056\uffea\001\002\000\116\002\uffe9\003" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\023\044\024" +
    "\043\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\056\uffe9\001\002\000\116\002" +
    "\uffe5\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\015\uffe5\017\045\020\047\021\050\023" +
    "\044\024\043\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\001\002\000" +
    "\116\002\uffe8\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\014\uffe8\015\uffe8\017\uffe8\020\047\021" +
    "\050\023\044\024\043\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\056\uffe8\001" +
    "\002\000\116\002\uffec\003\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\017\uffec\020" +
    "\uffec\021\uffec\023\uffec\024\043\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\056" +
    "\uffec\001\002\000\116\002\uffeb\003\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\056\uffeb\001\002\000\022\005\120\014\052\015\046" +
    "\017\045\020\047\021\050\023\044\024\043\001\002\000" +
    "\116\002\uffe4\003\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\056\uffe4\001" +
    "\002\000\016\004\037\013\036\016\035\054\040\055\041" +
    "\056\034\001\002\000\006\005\125\006\124\001\002\000" +
    "\024\005\uffde\006\uffde\014\052\015\046\017\045\020\047" +
    "\021\050\023\044\024\043\001\002\000\016\004\037\013" +
    "\036\016\035\054\040\055\041\056\034\001\002\000\116" +
    "\002\uffe3\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\056\uffe3\001\002" +
    "\000\024\005\uffdf\006\uffdf\014\052\015\046\017\045\020" +
    "\047\021\050\023\044\024\043\001\002\000\116\002\uffe7" +
    "\003\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\014\uffe7\015\uffe7\017\045\020\047\021\050\023\044" +
    "\024\043\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\056\uffe7\001\002\000\052" +
    "\003\024\007\012\012\005\014\052\015\046\017\045\020" +
    "\047\021\050\023\044\024\043\026\030\027\016\030\011" +
    "\036\032\042\031\044\013\046\025\050\023\052\010\056" +
    "\014\001\002\000\036\003\024\007\012\012\005\026\030" +
    "\027\016\030\011\036\032\042\031\043\132\044\013\046" +
    "\025\050\023\052\010\056\014\001\002\000\066\002\uffef" +
    "\003\uffef\007\uffef\010\uffef\011\uffef\012\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\056\uffef\001\002" +
    "\000\004\056\134\001\002\000\004\022\135\001\002\000" +
    "\016\004\037\013\036\016\035\054\040\055\041\056\034" +
    "\001\002\000\022\014\052\015\046\017\045\020\047\021" +
    "\050\023\044\024\043\025\137\001\002\000\016\004\037" +
    "\013\036\016\035\054\040\055\041\056\034\001\002\000" +
    "\022\014\052\015\046\017\045\020\047\021\050\023\044" +
    "\024\043\025\141\001\002\000\016\004\037\013\036\016" +
    "\035\054\040\055\041\056\034\001\002\000\022\005\143" +
    "\014\052\015\046\017\045\020\047\021\050\023\044\024" +
    "\043\001\002\000\034\003\024\007\012\012\005\026\030" +
    "\027\016\030\011\036\032\042\031\044\013\046\025\050" +
    "\023\052\010\056\014\001\002\000\036\003\024\007\012" +
    "\011\145\012\005\026\030\027\016\030\011\036\032\042" +
    "\031\044\013\046\025\050\023\052\010\056\014\001\002" +
    "\000\066\002\uffdd\003\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\056\uffdd\001\002\000\104\002\uffed\003\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\014\052\015\046\017\045\020\047" +
    "\021\050\023\044\024\043\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\043\uffed\044\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\056\uffed\001\002\000\052\003\024" +
    "\007\012\012\005\014\052\015\046\017\045\020\047\021" +
    "\050\023\044\024\043\026\030\027\016\030\011\036\032" +
    "\042\031\044\013\046\025\050\023\052\010\056\014\001" +
    "\002\000\040\003\024\007\012\012\005\026\030\027\016" +
    "\030\011\036\032\042\031\044\013\046\025\050\023\051" +
    "\151\052\010\053\152\056\014\001\002\000\034\003\024" +
    "\007\012\012\005\026\030\027\016\030\011\036\032\042" +
    "\031\044\013\046\025\050\023\052\010\056\014\001\002" +
    "\000\066\002\ufff2\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\056\ufff2\001\002\000\036\003\024\007\012\012\005\026" +
    "\030\027\016\030\011\036\032\042\031\044\013\046\025" +
    "\050\023\052\010\053\154\056\014\001\002\000\066\002" +
    "\ufff1\003\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\056\ufff1\001" +
    "\002\000\004\002\001\001\002\000\034\003\024\007\012" +
    "\012\005\026\030\027\016\030\011\036\032\042\031\044" +
    "\013\046\025\050\023\052\010\056\014\001\002\000\036" +
    "\003\024\007\012\012\005\026\030\027\016\030\011\035" +
    "\160\036\032\042\031\044\013\046\025\050\023\052\010" +
    "\056\014\001\002\000\004\012\161\001\002\000\016\004" +
    "\037\013\036\016\035\054\040\055\041\056\034\001\002" +
    "\000\022\011\163\014\052\015\046\017\045\020\047\021" +
    "\050\023\044\024\043\001\002\000\066\002\uffdb\003\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\056\uffdb\001\002\000\016" +
    "\004\037\013\036\016\035\054\040\055\041\056\034\001" +
    "\002\000\104\002\ufff5\003\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\052\015\046\017\045\020\047\021\050\023" +
    "\044\024\043\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\056\ufff5\001\002\000\004\056\167\001\002\000" +
    "\004\022\170\001\002\000\016\004\037\013\036\016\035" +
    "\054\040\055\041\056\034\001\002\000\022\014\052\015" +
    "\046\017\045\020\047\021\050\023\044\024\043\025\172" +
    "\001\002\000\016\004\037\013\036\016\035\054\040\055" +
    "\041\056\034\001\002\000\022\014\052\015\046\017\045" +
    "\020\047\021\050\023\044\024\043\045\174\001\002\000" +
    "\016\004\037\013\036\016\035\054\040\055\041\056\034" +
    "\001\002\000\022\014\052\015\046\017\045\020\047\021" +
    "\050\023\044\024\043\025\176\001\002\000\016\004\037" +
    "\013\036\016\035\054\040\055\041\056\034\001\002\000" +
    "\022\005\200\014\052\015\046\017\045\020\047\021\050" +
    "\023\044\024\043\001\002\000\034\003\024\007\012\012" +
    "\005\026\030\027\016\030\011\036\032\042\031\044\013" +
    "\046\025\050\023\052\010\056\014\001\002\000\036\003" +
    "\024\007\012\012\005\026\030\027\016\030\011\036\032" +
    "\042\031\044\013\046\025\047\202\050\023\052\010\056" +
    "\014\001\002\000\066\002\uffdc\003\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\056\uffdc\001\002\000\052\003\024\007\012" +
    "\012\005\014\052\015\046\017\045\020\047\021\050\023" +
    "\044\024\043\026\030\027\016\030\011\036\032\042\031" +
    "\044\013\046\025\050\023\052\010\056\014\001\002\000" +
    "\040\003\024\007\012\010\205\011\206\012\005\026\030" +
    "\027\016\030\011\036\032\042\031\044\013\046\025\050" +
    "\023\052\010\056\014\001\002\000\034\003\024\007\012" +
    "\012\005\026\030\027\016\030\011\036\032\042\031\044" +
    "\013\046\025\050\023\052\010\056\014\001\002\000\066" +
    "\002\ufff4\003\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\056\ufff4" +
    "\001\002\000\036\003\024\007\012\011\210\012\005\026" +
    "\030\027\016\030\011\036\032\042\031\044\013\046\025" +
    "\050\023\052\010\056\014\001\002\000\066\002\ufff3\003" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\056\ufff3\001\002\000" +
    "\016\004\037\013\036\016\035\054\040\055\041\056\034" +
    "\001\002\000\022\005\213\014\052\015\046\017\045\020" +
    "\047\021\050\023\044\024\043\001\002\000\004\034\214" +
    "\001\002\000\012\031\060\032\055\037\061\040\062\001" +
    "\002\000\014\031\060\032\055\035\216\037\061\040\062" +
    "\001\002\000\066\002\uffda\003\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\056\uffda\001\002\000\104\002\uffee\003\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\014\052\015\046\017\045" +
    "\020\047\021\050\023\044\024\043\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\056\uffee\001\002\000\052" +
    "\003\024\007\012\012\005\014\052\015\046\017\045\020" +
    "\047\021\050\023\044\024\043\026\030\027\016\030\011" +
    "\036\032\042\031\044\013\046\025\050\023\052\010\056" +
    "\014\001\002\000\036\003\024\007\012\011\222\012\005" +
    "\026\030\027\016\030\011\036\032\042\031\044\013\046" +
    "\025\050\023\052\010\056\014\001\002\000\066\002\ufff0" +
    "\003\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\056\ufff0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\026\002\016\003\003\004\006\005\014\006" +
    "\020\007\021\010\005\013\025\014\017\015\026\001\001" +
    "\000\022\004\064\005\014\006\020\007\021\010\005\013" +
    "\025\014\017\015\026\001\001\000\004\011\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\216\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\004\011\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\127\001\001\000" +
    "\002\001\001\000\004\011\041\001\001\000\002\001\001" +
    "\000\004\011\126\001\001\000\002\001\001\000\004\011" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\115\001\001\000\004\011\114\001" +
    "\001\000\004\011\113\001\001\000\004\011\112\001\001" +
    "\000\004\011\111\001\001\000\004\011\110\001\001\000" +
    "\002\001\001\000\004\011\052\001\001\000\002\001\001" +
    "\000\006\016\055\017\056\001\001\000\002\001\001\000" +
    "\004\017\103\001\001\000\002\001\001\000\004\011\072" +
    "\001\001\000\004\011\066\001\001\000\002\001\001\000" +
    "\024\003\063\004\006\005\014\006\020\007\021\010\005" +
    "\013\025\014\017\015\026\001\001\000\022\004\064\005" +
    "\014\006\020\007\021\010\005\013\025\014\017\015\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\070\004\006\005\014\006\020\007\021" +
    "\010\005\013\025\014\017\015\026\001\001\000\022\004" +
    "\064\005\014\006\020\007\021\010\005\013\025\014\017" +
    "\015\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\074\004\006\005\014\006\020\007\021\010\005" +
    "\013\025\014\017\015\026\001\001\000\024\004\064\005" +
    "\014\006\020\007\021\010\005\013\025\014\017\015\026" +
    "\020\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\106\004\006\005\014\006\020\007\021\010\005\013\025" +
    "\014\017\015\026\001\001\000\024\004\064\005\014\006" +
    "\020\007\021\010\005\013\025\014\017\015\026\020\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\122\012\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\130\004\006" +
    "\005\014\006\020\007\021\010\005\013\025\014\017\015" +
    "\026\001\001\000\022\004\064\005\014\006\020\007\021" +
    "\010\005\013\025\014\017\015\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\135" +
    "\001\001\000\002\001\001\000\004\011\137\001\001\000" +
    "\002\001\001\000\004\011\141\001\001\000\002\001\001" +
    "\000\024\003\143\004\006\005\014\006\020\007\021\010" +
    "\005\013\025\014\017\015\026\001\001\000\022\004\064" +
    "\005\014\006\020\007\021\010\005\013\025\014\017\015" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\147\004\006\005\014\006\020\007\021\010\005\013" +
    "\025\014\017\015\026\001\001\000\022\004\064\005\014" +
    "\006\020\007\021\010\005\013\025\014\017\015\026\001" +
    "\001\000\024\003\152\004\006\005\014\006\020\007\021" +
    "\010\005\013\025\014\017\015\026\001\001\000\002\001" +
    "\001\000\022\004\064\005\014\006\020\007\021\010\005" +
    "\013\025\014\017\015\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\156\004\006\005\014\006\020" +
    "\007\021\010\005\013\025\014\017\015\026\001\001\000" +
    "\022\004\064\005\014\006\020\007\021\010\005\013\025" +
    "\014\017\015\026\001\001\000\002\001\001\000\004\011" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\170\001\001\000\002\001\001" +
    "\000\004\011\172\001\001\000\002\001\001\000\004\011" +
    "\174\001\001\000\002\001\001\000\004\011\176\001\001" +
    "\000\002\001\001\000\024\003\200\004\006\005\014\006" +
    "\020\007\021\010\005\013\025\014\017\015\026\001\001" +
    "\000\022\004\064\005\014\006\020\007\021\010\005\013" +
    "\025\014\017\015\026\001\001\000\002\001\001\000\024" +
    "\003\203\004\006\005\014\006\020\007\021\010\005\013" +
    "\025\014\017\015\026\001\001\000\022\004\064\005\014" +
    "\006\020\007\021\010\005\013\025\014\017\015\026\001" +
    "\001\000\024\003\206\004\006\005\014\006\020\007\021" +
    "\010\005\013\025\014\017\015\026\001\001\000\002\001" +
    "\001\000\022\004\064\005\014\006\020\007\021\010\005" +
    "\013\025\014\017\015\026\001\001\000\002\001\001\000" +
    "\004\011\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\214\017\056\001\001\000\004\017\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\220" +
    "\004\006\005\014\006\020\007\021\010\005\013\025\014" +
    "\017\015\026\001\001\000\022\004\064\005\014\006\020" +
    "\007\021\010\005\013\025\014\017\015\026\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {



  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
parser.instrucciones = insts;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= if 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= while 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= for 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= doWhile 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= switch 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= imprimir 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= error 
            {
              Nodo RESULT =null;
		
Nodo n = new Nodo("Error");
RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if ::= IF expresion instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF expresion instrucciones ELSE instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= SI expresion instrucciones FINSI 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= SI expresion instrucciones NO instrucciones FINSI 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // while ::= WHILE expresion instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= MIENTRAS expresion instrucciones FINMIENTRAS 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // imprimir ::= IMPRIMIR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // imprimir ::= SIGUIENTE expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= NOT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion OR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion AND expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= CONCAT PARENTESIS_ABIERTO expresiones PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresiones ::= expresiones COMA expresion 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresiones ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for ::= FOR PARENTESIS_ABIERTO ID IGUAL expresion PUNTO_COMA expresion PUNTO_COMA expresion PARENTESIS_CERRADO instrucciones END 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Nodo inicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo incremento = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    nodo.hijos.add(cond);
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for ::= PARA PARENTESIS_ABIERTO ID IGUAL expresion PUNTO_COMA expresion HASTA expresion PUNTO_COMA expresion PARENTESIS_CERRADO instrucciones FINPARA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-11)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).right;
		Nodo inicial = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Nodo var = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int limiteleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int limiteright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo limite = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo incremento = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
    Nodo nodo = new Nodo("for");
    Nodo nodoId = new Nodo("variable");
    nodoId.hijos.add(new Nodo(id));
    nodo.hijos.add(nodoId);
    nodo.hijos.add(inicial);
    
    Nodo condicion = new Nodo("<");
    condicion.hijos.add(var);
    condicion.hijos.add(limite);
    nodo.hijos.add(condicion);
    
    nodo.hijos.add(incremento);
    nodo.hijos.add(insts);
    RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // doWhile ::= DO LLAVE_ABIERTA instrucciones LLAVE_CERRADA WHILE expresion END 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("do-while");
nodo.hijos.add(insts);
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("doWhile",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // switch ::= SWITCH PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos LLAVE_CERRADA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("switch"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // switch ::= SELECCIONAR PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos LLAVE_CERRADA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("switch"); 
              nodo.hijos.add(expr); 
              nodo.hijos.add(cs); 
              RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switch",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // casos ::= casos caso 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 Nodo nodo = cs; 
             nodo.hijos.add(c); 
             RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // casos ::= caso 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("casos"); 
             nodo.hijos.add(c); 
             RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caso ::= CASE expresion DOS_PUNTOS instrucciones opt_end 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // caso ::= DEFAULT DOS_PUNTOS instrucciones opt_end 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("default"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // caso ::= CASO expresion DOS_PUNTOS instrucciones FINCASO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("caso"); 
            nodo.hijos.add(expr); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // caso ::= CONTRARIO DOS_PUNTOS instrucciones FINCASO 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		 Nodo nodo = new Nodo("default"); 
            nodo.hijos.add(insts); 
            RESULT = nodo; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caso",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opt_end ::= END 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_end ::= FINCASO 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_end ::= FINMIENTRAS 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_end ::= FINPARA 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_end ::= FINSI 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_end ::= 
            {
              Nodo RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("opt_end",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
