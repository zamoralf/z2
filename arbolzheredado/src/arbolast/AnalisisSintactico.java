
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package arbolast;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\005\000\002\020\006\000\002\021\003\000\002\021" +
    "\005\000\002\012\014\000\002\013\007\000\002\014\012" +
    "\000\002\017\004\000\002\017\003\000\002\015\007\000" +
    "\002\016\006\000\002\016\002\000\002\005\006\000\002" +
    "\005\010\000\002\006\006\000\002\007\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\006\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\005\000\002\011\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\024\003\024\007\012\012\005\014\010\027" +
    "\026\030\015\031\011\037\025\051\013\001\002\000\026" +
    "\002\155\003\024\007\012\012\005\014\010\027\026\030" +
    "\015\031\011\037\025\051\013\001\002\000\016\004\035" +
    "\013\034\017\033\047\040\050\036\051\032\001\002\000" +
    "\032\002\ufffb\003\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\014\ufffb\027\ufffb\030\ufffb\031\ufffb\037\ufffb\051\ufffb\001" +
    "\002\000\032\002\uffff\003\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\014\uffff\027\uffff\030\uffff\031\uffff\037\uffff\051" +
    "\uffff\001\002\000\016\004\035\013\034\017\033\047\040" +
    "\050\036\051\032\001\002\000\004\004\131\001\002\000" +
    "\016\004\035\013\034\017\033\047\040\050\036\051\032" +
    "\001\002\000\004\023\121\001\002\000\032\002\ufffe\003" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\037\ufffe\051\ufffe\001\002\000\024\003" +
    "\024\007\012\012\005\014\010\027\026\030\015\031\011" +
    "\037\025\051\013\001\002\000\032\002\ufff7\003\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\037\ufff7\051\ufff7\001\002\000\032\002\ufffa\003" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\037\ufffa\051\ufffa\001\002\000\032\002" +
    "\ufff9\003\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\037\ufff9\051\ufff9\001\002\000" +
    "\032\002\ufffd\003\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\014\ufffd\027\ufffd\030\ufffd\031\ufffd\037\ufffd\051\ufffd\001" +
    "\002\000\032\002\ufffc\003\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\027\ufffc\030\ufffc\031\ufffc\037\ufffc\051" +
    "\ufffc\001\002\000\032\002\ufff8\003\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\014\ufff8\027\ufff8\030\ufff8\031\ufff8\037" +
    "\ufff8\051\ufff8\001\002\000\032\002\ufff6\003\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\037\ufff6\051\ufff6\001\002\000\004\051\100\001\002" +
    "\000\004\004\027\001\002\000\004\051\013\001\002\000" +
    "\004\026\031\001\002\000\016\004\035\013\034\017\033" +
    "\047\040\050\036\051\032\001\002\000\062\002\uffda\003" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\022\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\036\uffda" +
    "\037\uffda\046\uffda\051\uffda\001\002\000\016\004\035\013" +
    "\034\017\033\047\040\050\036\051\032\001\002\000\004" +
    "\004\071\001\002\000\016\004\035\013\034\017\033\047" +
    "\040\050\036\051\032\001\002\000\062\002\uffd8\003\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\036\uffd8\037" +
    "\uffd8\046\uffd8\051\uffd8\001\002\000\024\015\051\016\041" +
    "\020\044\021\043\022\047\024\046\025\042\026\045\046" +
    "\050\001\002\000\062\002\uffd9\003\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\036\uffd9\037\uffd9\046\uffd9\051" +
    "\uffd9\001\002\000\016\004\035\013\034\017\033\047\040" +
    "\050\036\051\032\001\002\000\016\004\035\013\034\017" +
    "\033\047\040\050\036\051\032\001\002\000\016\004\035" +
    "\013\034\017\033\047\040\050\036\051\032\001\002\000" +
    "\016\004\035\013\034\017\033\047\040\050\036\051\032" +
    "\001\002\000\004\051\013\001\002\000\016\004\035\013" +
    "\034\017\033\047\040\050\036\051\032\001\002\000\016" +
    "\004\035\013\034\017\033\047\040\050\036\051\032\001" +
    "\002\000\016\004\035\013\034\017\033\047\040\050\036" +
    "\051\032\001\002\000\016\004\035\013\034\017\033\047" +
    "\040\050\036\051\032\001\002\000\062\002\uffde\003\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014" +
    "\uffde\015\uffde\016\041\020\044\021\043\022\047\024\046" +
    "\025\042\026\uffde\027\uffde\030\uffde\031\uffde\036\uffde\037" +
    "\uffde\046\050\051\uffde\001\002\000\062\002\uffe0\003\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\020\uffe0\021\043\022\047\024\046" +
    "\025\042\026\uffe0\027\uffe0\030\uffe0\031\uffe0\036\uffe0\037" +
    "\uffe0\046\uffe0\051\uffe0\001\002\000\062\002\uffe3\003\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\024\046" +
    "\025\042\026\uffe3\027\uffe3\030\uffe3\031\uffe3\036\uffe3\037" +
    "\uffe3\046\uffe3\051\uffe3\001\002\000\062\002\uffe5\003\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5" +
    "\025\042\026\uffe5\027\uffe5\030\uffe5\031\uffe5\036\uffe5\037" +
    "\uffe5\046\uffe5\051\uffe5\001\002\000\004\005\057\001\002" +
    "\000\024\003\024\007\012\012\005\014\010\027\026\030" +
    "\015\031\011\037\025\051\013\001\002\000\026\003\024" +
    "\007\012\011\061\012\005\014\010\027\026\030\015\031" +
    "\011\037\025\051\013\001\002\000\032\002\ufff1\003\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\037\ufff1\051\ufff1\001\002\000\032\002\000" +
    "\003\000\007\000\010\000\011\000\012\000\014\000\027" +
    "\000\030\000\031\000\037\000\051\000\001\002\000\062" +
    "\002\uffe1\003\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\043" +
    "\022\047\024\046\025\042\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\036\uffe1\037\uffe1\046\uffe1\051\uffe1\001\002\000\062" +
    "\002\uffe2\003\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\024\046\025\042\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\036\uffe2\037\uffe2\046\uffe2\051\uffe2\001\002\000\062" +
    "\002\uffe4\003\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\036\uffe4\037\uffe4\046\uffe4\051\uffe4\001\002\000\062" +
    "\002\uffdd\003\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\020\044\021\043" +
    "\022\047\024\046\025\042\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\036\uffdd\037\uffdd\046\050\051\uffdd\001\002\000\024" +
    "\005\070\015\051\016\041\020\044\021\043\022\047\024" +
    "\046\025\042\046\050\001\002\000\062\002\uffdc\003\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\036\uffdc\037" +
    "\uffdc\046\uffdc\051\uffdc\001\002\000\016\004\035\013\034" +
    "\017\033\047\040\050\036\051\032\001\002\000\006\005" +
    "\075\006\074\001\002\000\026\005\uffd6\006\uffd6\015\051" +
    "\016\041\020\044\021\043\022\047\024\046\025\042\046" +
    "\050\001\002\000\016\004\035\013\034\017\033\047\040" +
    "\050\036\051\032\001\002\000\062\002\uffdb\003\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\036\uffdb\037\uffdb" +
    "\046\uffdb\051\uffdb\001\002\000\026\005\uffd7\006\uffd7\015" +
    "\051\016\041\020\044\021\043\022\047\024\046\025\042" +
    "\046\050\001\002\000\062\002\uffdf\003\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\036\uffdf\037\uffdf\046\uffdf" +
    "\051\uffdf\001\002\000\006\006\ufff3\040\ufff3\001\002\000" +
    "\006\006\102\040\103\001\002\000\004\051\112\001\002" +
    "\000\014\041\107\042\106\043\105\044\111\045\104\001" +
    "\002\000\032\002\uffd2\003\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\014\uffd2\027\uffd2\030\uffd2\031\uffd2\037\uffd2\051" +
    "\uffd2\001\002\000\032\002\uffd1\003\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\014\uffd1\027\uffd1\030\uffd1\031\uffd1\037" +
    "\uffd1\051\uffd1\001\002\000\032\002\uffd4\003\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\014\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\037\uffd4\051\uffd4\001\002\000\032\002\uffd3\003\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\037\uffd3\051\uffd3\001\002\000\032\002\ufff4" +
    "\003\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\037\ufff4\051\ufff4\001\002\000\032" +
    "\002\uffd5\003\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\037\uffd5\051\uffd5\001\002" +
    "\000\006\006\ufff2\040\ufff2\001\002\000\024\003\024\007" +
    "\012\012\114\014\010\027\026\030\015\031\011\037\025" +
    "\051\013\001\002\000\016\004\035\013\034\017\033\047" +
    "\040\050\036\051\032\001\002\000\046\003\024\007\012" +
    "\011\117\012\005\014\010\015\051\016\041\020\044\021" +
    "\043\022\047\024\046\025\042\027\026\030\015\031\011" +
    "\037\025\046\050\051\013\001\002\000\026\003\024\007" +
    "\012\011\120\012\005\014\010\027\026\030\015\031\011" +
    "\037\025\051\013\001\002\000\032\002\ufff0\003\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\037\ufff0\051\ufff0\001\002\000\032\002\uffe7\003" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\037\uffe7\051\uffe7\001\002\000\016\004" +
    "\035\013\034\017\033\047\040\050\036\051\032\001\002" +
    "\000\056\002\ufff5\003\ufff5\005\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\051\016\041\020\044\021\043" +
    "\022\047\024\046\025\042\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\037\ufff5\046\050\051\ufff5\001\002\000\044\003\024" +
    "\007\012\012\005\014\010\015\051\016\041\020\044\021" +
    "\043\022\047\024\046\025\042\027\026\030\015\031\011" +
    "\037\025\046\050\051\013\001\002\000\030\003\024\007" +
    "\012\010\125\011\126\012\005\014\010\027\026\030\015" +
    "\031\011\037\025\051\013\001\002\000\024\003\024\007" +
    "\012\012\005\014\010\027\026\030\015\031\011\037\025" +
    "\051\013\001\002\000\032\002\uffe9\003\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\014\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\037\uffe9\051\uffe9\001\002\000\026\003\024\007\012\011" +
    "\130\012\005\014\010\027\026\030\015\031\011\037\025" +
    "\051\013\001\002\000\032\002\uffe8\003\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\014\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\037\uffe8\051\uffe8\001\002\000\016\004\035\013\034\017" +
    "\033\047\040\050\036\051\032\001\002\000\024\005\133" +
    "\015\051\016\041\020\044\021\043\022\047\024\046\025" +
    "\042\046\050\001\002\000\004\034\134\001\002\000\004" +
    "\032\137\001\002\000\010\032\137\033\144\035\uffea\001" +
    "\002\000\010\032\uffed\033\uffed\035\uffed\001\002\000\016" +
    "\004\035\013\034\017\033\047\040\050\036\051\032\001" +
    "\002\000\024\015\051\016\041\020\044\021\043\022\047" +
    "\024\046\025\042\036\141\046\050\001\002\000\024\003" +
    "\024\007\012\012\005\014\010\027\026\030\015\031\011" +
    "\037\025\051\013\001\002\000\026\003\024\007\012\011" +
    "\143\012\005\014\010\027\026\030\015\031\011\037\025" +
    "\051\013\001\002\000\010\032\uffec\033\uffec\035\uffec\001" +
    "\002\000\004\036\150\001\002\000\004\035\147\001\002" +
    "\000\010\032\uffee\033\uffee\035\uffee\001\002\000\032\002" +
    "\uffef\003\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\027\uffef\030\uffef\031\uffef\037\uffef\051\uffef\001\002\000" +
    "\024\003\024\007\012\012\005\014\010\027\026\030\015" +
    "\031\011\037\025\051\013\001\002\000\026\003\024\007" +
    "\012\011\152\012\005\014\010\027\026\030\015\031\011" +
    "\037\025\051\013\001\002\000\004\035\uffeb\001\002\000" +
    "\052\002\uffe6\003\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\015\051\016\041\020\044\021\043\022\047\024" +
    "\046\025\042\027\uffe6\030\uffe6\031\uffe6\037\uffe6\046\050" +
    "\051\uffe6\001\002\000\044\003\024\007\012\012\005\014" +
    "\010\015\051\016\041\020\044\021\043\022\047\024\046" +
    "\025\042\027\026\030\015\031\011\037\025\046\050\051" +
    "\013\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\026\002\003\003\006\004\013\005\020\006" +
    "\021\007\005\012\016\013\017\014\022\020\015\001\001" +
    "\000\024\003\061\004\013\005\020\006\021\007\005\012" +
    "\016\013\017\014\022\020\015\001\001\000\004\010\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\152\001\001\000\002\001\001\000\004\010\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\112\003" +
    "\006\004\013\005\020\006\021\007\005\012\016\013\017" +
    "\014\022\020\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\100\001" +
    "\001\000\002\001\001\000\004\004\027\001\001\000\002" +
    "\001\001\000\004\010\036\001\001\000\002\001\001\000" +
    "\004\010\076\001\001\000\002\001\001\000\004\010\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\065\001\001\000\004\010\064\001\001" +
    "\000\004\010\063\001\001\000\004\010\062\001\001\000" +
    "\004\004\055\001\001\000\004\010\054\001\001\000\004" +
    "\010\053\001\001\000\004\010\052\001\001\000\004\010" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\057\003\006\004\013\005\020\006\021\007\005\012\016" +
    "\013\017\014\022\020\015\001\001\000\024\003\061\004" +
    "\013\005\020\006\021\007\005\012\016\013\017\014\022" +
    "\020\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\072\011\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\061\004\013\005\020\006\021\007\005\012\016" +
    "\013\017\014\022\020\015\001\001\000\004\010\114\001" +
    "\001\000\026\002\115\003\006\004\013\005\020\006\021" +
    "\007\005\012\016\013\017\014\022\020\015\001\001\000" +
    "\024\003\061\004\013\005\020\006\021\007\005\012\016" +
    "\013\017\014\022\020\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\121\001\001\000\002\001\001" +
    "\000\026\002\123\003\006\004\013\005\020\006\021\007" +
    "\005\012\016\013\017\014\022\020\015\001\001\000\024" +
    "\003\061\004\013\005\020\006\021\007\005\012\016\013" +
    "\017\014\022\020\015\001\001\000\026\002\126\003\006" +
    "\004\013\005\020\006\021\007\005\012\016\013\017\014" +
    "\022\020\015\001\001\000\002\001\001\000\024\003\061" +
    "\004\013\005\020\006\021\007\005\012\016\013\017\014" +
    "\022\020\015\001\001\000\002\001\001\000\004\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\135\017\134\001\001\000\006\015\145\016\144\001\001" +
    "\000\002\001\001\000\004\010\137\001\001\000\002\001" +
    "\001\000\026\002\141\003\006\004\013\005\020\006\021" +
    "\007\005\012\016\013\017\014\022\020\015\001\001\000" +
    "\024\003\061\004\013\005\020\006\021\007\005\012\016" +
    "\013\017\014\022\020\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\150\003\006\004\013\005\020\006" +
    "\021\007\005\012\016\013\017\014\022\020\015\001\001" +
    "\000\024\003\061\004\013\005\020\006\021\007\005\012" +
    "\016\013\017\014\022\020\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\115\003\006\004\013\005" +
    "\020\006\021\007\005\012\016\013\017\014\022\020\015" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



// METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS

public Nodo instrucciones;
public void syntax_error(Symbol s){
/**Metodo al que se llama automaticamente ante algun error sintactico.*/
        System.out.println("Error en simbolo: " + s.value + ", " + s.left + ", " + s.right);
}
             
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
        System.out.println("Error en simbolo: " + s.value + ", " + s.left + ", " + s.right);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER ATRIBUTOS HEREDADOS
//FORMA CORRECTA DE HEREDAR UN VALOR SE HACE CON UNA PILA
Stack<String> tipo = new Stack<String>(); // Atributo heredado tipo de variable

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instrucciones instruccion 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Instruccion");
nodo.hijos.add(inst);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= asignacion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= if 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= while 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimir 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= forLoop 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= doWhile 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= switchStmt 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= error 
            {
              Nodo RESULT =null;
		
Nodo n = new Nodo("Error");
RESULT = n;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= ID IGUAL expresion 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= DIM idList COMO tipoVariable 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("declaracion");
Nodo tipoNodo = new Nodo(tipo);
nodo.hijos.add(tipoNodo);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",14, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // idList ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(id);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("idList",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // idList ::= idList COMA ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = idList;
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("idList",15, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // forLoop ::= FOR PARENTESIS_ABIERTO asignacion PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CERRADO instrucciones END 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("for");
nodo.hijos.add(asig);  // Asignación inicial
nodo.hijos.add(cond);  // Condición
nodo.hijos.add(inc);   // Incremento
nodo.hijos.add(insts); // Instrucciones del cuerpo
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("forLoop",8, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // doWhile ::= DO instrucciones WHILE expresion END 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("do-while");
nodo.hijos.add(insts); // Instrucciones del cuerpo
nodo.hijos.add(expr);  // Condición
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("doWhile",9, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // switchStmt ::= SWITCH PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA casos defaultStmt LLAVE_CERRADA 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo cases = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("switch");
nodo.hijos.add(expr);  // Expresión a evaluar
nodo.hijos.add(cases); // Casos
nodo.hijos.add(def);   // Caso default
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("switchStmt",10, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // casos ::= casos caseStmt 
            {
              Nodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo cs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = cs;
nodo.hijos.add(c);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // casos ::= caseStmt 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("casos");
nodo.hijos.add(c);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("casos",13, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // caseStmt ::= CASE expresion DOS_PUNTOS instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("case");
nodo.hijos.add(expr);  // Valor del caso
nodo.hijos.add(insts); // Instrucciones del caso
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("caseStmt",11, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defaultStmt ::= DEFAULT DOS_PUNTOS instrucciones END 
            {
              Nodo RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("default");
nodo.hijos.add(insts); // Instrucciones del caso default
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("defaultStmt",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defaultStmt ::= 
            {
              Nodo RESULT =null;
		
Nodo nodo = new Nodo("default");
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("defaultStmt",12, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= IF expresion instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= IF expresion instrucciones ELSE instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // while ::= WHILE expresion instrucciones END 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo insts = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // imprimir ::= IMPRIMIR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo =  new Nodo("imprimir");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion ASTERISCO expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion IGUAL_IGUAL expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion DIFERENTE expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("!=");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= NOT expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion OR expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion AND expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr2 = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
RESULT = expr;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= CONCAT PARENTESIS_ABIERTO expresiones PARENTESIS_CERRADO 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones ::= expresiones COMA expresion 
            {
              Nodo RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		Nodo exprs = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones ::= expresion 
            {
              Nodo RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		Nodo expr = (Nodo)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
Nodo nodo = new Nodo("Expresion");
nodo.hijos.add(expr);
RESULT = nodo;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("expresiones",7, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoVariable ::= INT 
            {
              String RESULT =null;
		
RESULT = "int";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoVariable ::= CHAR 
            {
              String RESULT =null;
		
RESULT = "char";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoVariable ::= BOOLEAN 
            {
              String RESULT =null;
		
RESULT = "boolean";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoVariable ::= STRING 
            {
              String RESULT =null;
		
RESULT = "string";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoVariable ::= DOUBLE 
            {
              String RESULT =null;
		
RESULT = "double";

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("tipoVariable",16, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
